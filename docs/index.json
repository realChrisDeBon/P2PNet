{
  "P2PBootstrap/bin/Release/net9.0/wwwroot/node_modules/xterm/README.html": {
    "href": "P2PBootstrap/bin/Release/net9.0/wwwroot/node_modules/xterm/README.html",
    "title": "| P2PNetDocs",
    "summary": "Xterm.js is a front-end component written in TypeScript that lets applications bring fully-featured terminals to their users in the browser. It's used by popular projects such as VS Code, Hyper and Theia. Features Terminal apps just work: Xterm.js works with most terminal apps such as bash, vim, and tmux, including support for curses-based apps and mouse events. Performant: Xterm.js is really fast, it even includes a GPU-accelerated renderer. Rich Unicode support: Supports CJK, emojis, and IMEs. Self-contained: Requires zero dependencies to work. Accessible: Screen reader and minimum contrast ratio support can be turned on. And much more: Links, theming, addons, well documented API, etc. What xterm.js is not Xterm.js is not a terminal application that you can download and use on your computer. Xterm.js is not bash. Xterm.js can be connected to processes like bash and let you interact with them (provide input, receive output). Getting Started First, you need to install the module, we ship exclusively through npm, so you need that installed and then add xterm.js as a dependency by running: npm install xterm To start using xterm.js on your browser, add the xterm.js and xterm.css to the head of your HTML page. Then create a <div id=\"terminal\"></div> onto which xterm can attach itself. Finally, instantiate the Terminal object and then call the open function with the DOM object of the div. <!doctype html> <html> <head> <link rel=\"stylesheet\" href=\"node_modules/xterm/css/xterm.css\" /> <script src=\"node_modules/xterm/lib/xterm.js\"></script> </head> <body> <div id=\"terminal\"></div> <script> var term = new Terminal(); term.open(document.getElementById('terminal')); term.write('Hello from \\x1B[1;3;31mxterm.js\\x1B[0m $ ') </script> </body> </html> Importing The recommended way to load xterm.js is via the ES6 module syntax: import { Terminal } from 'xterm'; Addons ⚠️ This section describes the new addon format introduced in v3.14.0, see here for the instructions on the old format Addons are separate modules that extend the Terminal by building on the xterm.js API. To use an addon, you first need to install it in your project: npm i -S xterm-addon-web-links Then import the addon, instantiate it and call Terminal.loadAddon: import { Terminal } from 'xterm'; import { WebLinksAddon } from 'xterm-addon-web-links'; const terminal = new Terminal(); // Load WebLinksAddon on terminal, this is all that's needed to get web links // working in the terminal. terminal.loadAddon(new WebLinksAddon()); The xterm.js team maintains the following addons, but anyone can build them: xterm-addon-attach: Attaches to a server running a process via a websocket xterm-addon-fit: Fits the terminal to the containing element xterm-addon-search: Adds search functionality xterm-addon-web-links: Adds web link detection and interaction Browser Support Since xterm.js is typically implemented as a developer tool, only modern browsers are supported officially. Specifically the latest versions of Chrome, Edge, Firefox, and Safari. Xterm.js works seamlessly in Electron apps and may even work on earlier versions of the browsers. These are the versions we strive to keep working. Node.js Support We also publish xterm-headless which is a stripped down version of xterm.js that runs in Node.js. An example use case for this is to keep track of a terminal's state where the process is running and using the serialize addon so it can get all state restored upon reconnection. API The full API for xterm.js is contained within the TypeScript declaration file, use the branch/tag picker in GitHub (w) to navigate to the correct version of the API. Note that some APIs are marked experimental, these are added to enable experimentation with new ideas without committing to support it like a normal semver API. Note that these APIs can change radically between versions, so be sure to read release notes if you plan on using experimental APIs. Releases Xterm.js follows a monthly release cycle roughly. All current and past releases are available on this repo's Releases page, you can view the high-level roadmap on the wiki and see what we're working on now by looking through Milestones. Beta builds Our CI releases beta builds to npm for every change that goes into master. Install the latest beta build with: npm install -S xterm@beta These should generally be stable, but some bugs may slip in. We recommend using the beta build primarily to test out new features and to verify bug fixes. Contributing You can read the guide on the wiki to learn how to contribute and set up xterm.js for development. Real-world uses Xterm.js is used in several world-class applications to provide great terminal experiences. SourceLair: In-browser IDE that provides its users with fully-featured Linux terminals based on xterm.js. Microsoft Visual Studio Code: Modern, versatile, and powerful open source code editor that provides an integrated terminal based on xterm.js. ttyd: A command-line tool for sharing terminal over the web, with fully-featured terminal emulation based on xterm.js. Katacoda: Katacoda is an Interactive Learning Platform for software developers, covering the latest Cloud Native technologies. Eclipse Che: Developer workspace server, cloud IDE, and Eclipse next-generation IDE. Codenvy: Cloud workspaces for development teams. CoderPad: Online interviewing platform for programmers. Run code in many programming languages, with results displayed by xterm.js. WebSSH2: A web based SSH2 client using xterm.js, socket.io, and ssh2. Spyder Terminal: A full fledged system terminal embedded on Spyder IDE. Cloud Commander: Orthodox web file manager with console and editor. Next Tech: Online platform for interactive coding and web development courses. Live container-backed terminal uses xterm.js. RStudio: RStudio is an integrated development environment (IDE) for R. Terminal for Atom: A simple terminal for the Atom text editor. Eclipse Orion: A modern, open source software development environment that runs in the cloud. Code, deploy, and run in the cloud. Gravitational Teleport: Gravitational Teleport is a modern SSH server for remotely accessing clusters of Linux servers via SSH or HTTPS. Hexlet: Practical programming courses (JavaScript, PHP, Unix, databases, functional programming). A steady path from the first line of code to the first job. Selenoid UI: Simple UI for the scalable golang implementation of Selenium Hub named Selenoid. We use XTerm for streaming logs over websockets from docker containers. Portainer: Simple management UI for Docker. SSHy: HTML5 Based SSHv2 Web Client with E2E encryption utilising xterm.js, SJCL & websockets. JupyterLab: An extensible computational environment for Jupyter, supporting interactive data science and scientific computing across all programming languages. Theia: Theia is a cloud & desktop IDE framework implemented in TypeScript. Opshell Ops Helper tool to make life easier working with AWS instances across multiple organizations. Proxmox VE: Proxmox VE is a complete open-source platform for enterprise virtualization. It uses xterm.js for container terminals and the host shell. Script Runner: Run scripts (or a shell) in Atom. Whack Whack Terminal: Terminal emulator for Visual Studio 2017. VTerm: Extensible terminal emulator based on Electron and React. electerm: electerm is a terminal/ssh/sftp client(mac, win, linux) based on electron/node-pty/xterm. Kubebox: Terminal console for Kubernetes clusters. Azure Cloud Shell: Azure Cloud Shell is a Microsoft-managed admin machine built on Azure, for Azure. atom-xterm: Atom plugin for providing terminals inside your Atom workspace. rtty: Access your terminals from anywhere via the web. Pisth: An SFTP and SSH client for iOS. abstruse: Abstruse CI is a continuous integration platform based on Node.JS and Docker. Azure Data Studio: A data management tool that enables working with SQL Server, Azure SQL DB and SQL DW from Windows, macOS and Linux. FreeMAN: A free, cross-platform file manager for power users. Fluent Terminal: A terminal emulator based on UWP and web technologies. Hyper: A terminal built on web technologies. Diag: A better way to troubleshoot problems faster. Capture, share and reapply troubleshooting knowledge so you can focus on solving problems that matter. GoTTY: A simple command line tool that shares your terminal as a web application based on xterm.js. genact: A nonsense activity generator. cPanel & WHM: The hosting platform of choice. Nutanix: Nutanix Enterprise Cloud uses xterm in the webssh functionality within Nutanix Calm, and is also looking to move our old noserial (termjs) functionality to xterm.js. SSH Web Client: SSH Web Client with PHP. Juno: A flexible Julia IDE, based on Atom. webssh: Web based ssh client. info-beamer hosted: Uses xterm.js to manage digital signage devices from the web dashboard. Jumpserver: Jumpserver Luna project, Jumpserver is a bastion server project, Luna use xterm.js for web terminal emulation. LxdMosaic: Uses xterm.js to give terminal access to containers through LXD CodeInterview.io: A coding interview platform in 25+ languages and many web frameworks. Uses xterm.js to provide shell access. Bastillion: Bastillion is an open-source web-based SSH console that centrally manages administrative access to systems. PHP App Server: Create lightweight, installable almost-native applications for desktop OSes. ExecTerminal (nicely wraps the xterm.js Terminal), TerminalManager, and RunProcessSDK are self-contained, reusable ES5+ compliant Javascript components. NgTerminal: NgTerminal is a web terminal that leverages xterm.js on Angular 7+. You can easily add it into your application by adding <ng-terminal></ng-terminal> into your component. tty-share: Extremely simple terminal sharing over the Internet. Ten Hands: One place to run your command-line tasks. WebAssembly.sh: A WebAssembly WASI browser terminal Gus: A shared coding pad where you can run Python with xterm.js Linode: Linode uses xterm.js to provide users a web console for their Linode instances. FluffOS: Active maintained LPMUD driver with websocket support. x-terminal: Atom plugin for providing terminals inside your Atom workspace. CoCalc: Lots of free software pre-installed, to chat, collaborate, develop, program, publish, research, share, teach, in C++, HTML, Julia, Jupyter, LaTeX, Markdown, Python, R, SageMath, Scala, ... Dank Domain: Open source multiuser medieval game supporting old & new terminal emulation. DockerStacks: Local LAMP/LEMP development studio Codecademy: Uses xterm.js in its courses on Bash. Laravel Ssh Web Client: Laravel server inventory with ssh web client to connect at server using xterm.js Replit: Collaborative browser based IDE with support for 50+ different languages. TeleType: cli tool that allows you to share your terminal online conveniently. Show off mad cli-fu, help a colleague, teach, or troubleshoot. Intervue: Pair programming for interviews. Multiple programming languages are supported, with results displayed by xterm.js. TRASA: Zero trust access to Web, SSH, RDP, and Database services. Commas: Commas is a hackable terminal and command runner. Devtron: Software Delivery Workflow For Kubernetes. NxShell: An easy to use new terminal for SSH. gifcast: Converts an asciinema cast to an animated GIF. WizardWebssh: A terminal with Pyqt5 Widget for embedding, which can be used as an ssh client to connect to your ssh servers. It is written in Python, based on tornado, paramiko, and xterm.js. Wizard Assistant: Wizard Assistant comes with advanced automation tools, preloaded common and special time-saving commands, and a built-in SSH terminal. Now you can remotely administer, troubleshoot, and analyze any system with ease. ucli: Command Line for everyone \uD83D\uDC68‍\uD83D\uDC69‍\uD83D\uDC67‍\uD83D\uDC66 at www.ucli.tech. Tess: Simple Terminal Fully Customizable for Everyone. Discover more at tessapp.dev HashiCorp Nomad: A container orchestrator with the ability to connect to remote tasks via a web interface using websockets and xterm.js. TermPair: View and control terminals from your browser with end-to-end encryption gdbgui: Browser-based frontend to gdb (gnu debugger) goormIDE: Run almost every programming languages with real-time collaboration, live pair programming, and built-in messenger. FleetDeck: Remote desktop & virtual terminal OpenSumi: A framework helps you quickly build Cloud or Desktop IDE products. KubeSail: The Self-Hosting Company - uses xterm to allow users to exec into kubernetes pods and build github apps WiTTY: Web-based interactive terminal emulator that allows users to easily record, share, and replay console sessions. libv86 Terminal Forwarding: Peer-to-peer SSH for the web, using WebRTC via Bugout for data transfer and v86 for web-based virtualization. hack.courses: Interactive Linux and command-line classes using xterm.js to expose a real terminal available for everyone. Render: Platform-as-a-service for your apps, websites, and databases using xterm.js to provide a command prompt for user containers and for streaming build and runtime logs. CloudTTY: A Friendly Kubernetes CloudShell (Web Terminal). Go SSH Web Client: A simple SSH web client using Go, WebSocket and Xterm.js. web3os: A decentralized operating system for the next web Cratecode: Learn to program for free through interactive online lessons. Cratecode uses xterm.js to give users access to their own Linux environment. Super Terminal: It is a http based terminal for developers who dont like repetition and save time. graSSHopper: A simple SSH client with file explorer, history and many more features. DomTerm: Tiles and tabs. Detachable sessions (like tmux). Remote connections using a nice ssh wrapper with predictive echo. Qt, Electron, Tauri/Wry, or desktop browser front-ends. Choose between xterm.js engine (faster) or native DomTerm (more functionality and graphics) - or both. Cloudtutor.io: innovative online learning platform that offers users access to an interactive lab. Helix Editor Playground: Online playground for the terminal based helix editor. Coder: Self-Hosted Remote Development Environments And much more... Do you use xterm.js in your application as well? Please open a Pull Request to include it here. We would love to have it on our list. Note: Please add any new contributions to the end of the list only. License Agreement If you contribute code to this project, you implicitly allow your code to be distributed under the MIT license. You are also implicitly verifying that all code is your original work. Copyright (c) 2017-2022, The xterm.js authors (MIT License) Copyright (c) 2014-2017, SourceLair, Private Company (www.sourcelair.com) (MIT License) Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)"
  },
  "P2PBootstrap/bin/Release/net9.0/wwwroot/node_modules/xterm/src/browser/renderer/shared/README.html": {
    "href": "P2PBootstrap/bin/Release/net9.0/wwwroot/node_modules/xterm/src/browser/renderer/shared/README.html",
    "title": "| P2PNetDocs",
    "summary": "This folder contains files that are shared between the renderer addons, but not necessarily bundled into the xterm module."
  },
  "P2PBootstrap/node_modules/xterm/README.html": {
    "href": "P2PBootstrap/node_modules/xterm/README.html",
    "title": "| P2PNetDocs",
    "summary": "Xterm.js is a front-end component written in TypeScript that lets applications bring fully-featured terminals to their users in the browser. It's used by popular projects such as VS Code, Hyper and Theia. Features Terminal apps just work: Xterm.js works with most terminal apps such as bash, vim, and tmux, including support for curses-based apps and mouse events. Performant: Xterm.js is really fast, it even includes a GPU-accelerated renderer. Rich Unicode support: Supports CJK, emojis, and IMEs. Self-contained: Requires zero dependencies to work. Accessible: Screen reader and minimum contrast ratio support can be turned on. And much more: Links, theming, addons, well documented API, etc. What xterm.js is not Xterm.js is not a terminal application that you can download and use on your computer. Xterm.js is not bash. Xterm.js can be connected to processes like bash and let you interact with them (provide input, receive output). Getting Started First, you need to install the module, we ship exclusively through npm, so you need that installed and then add xterm.js as a dependency by running: npm install xterm To start using xterm.js on your browser, add the xterm.js and xterm.css to the head of your HTML page. Then create a <div id=\"terminal\"></div> onto which xterm can attach itself. Finally, instantiate the Terminal object and then call the open function with the DOM object of the div. <!doctype html> <html> <head> <link rel=\"stylesheet\" href=\"node_modules/xterm/css/xterm.css\" /> <script src=\"node_modules/xterm/lib/xterm.js\"></script> </head> <body> <div id=\"terminal\"></div> <script> var term = new Terminal(); term.open(document.getElementById('terminal')); term.write('Hello from \\x1B[1;3;31mxterm.js\\x1B[0m $ ') </script> </body> </html> Importing The recommended way to load xterm.js is via the ES6 module syntax: import { Terminal } from 'xterm'; Addons ⚠️ This section describes the new addon format introduced in v3.14.0, see here for the instructions on the old format Addons are separate modules that extend the Terminal by building on the xterm.js API. To use an addon, you first need to install it in your project: npm i -S xterm-addon-web-links Then import the addon, instantiate it and call Terminal.loadAddon: import { Terminal } from 'xterm'; import { WebLinksAddon } from 'xterm-addon-web-links'; const terminal = new Terminal(); // Load WebLinksAddon on terminal, this is all that's needed to get web links // working in the terminal. terminal.loadAddon(new WebLinksAddon()); The xterm.js team maintains the following addons, but anyone can build them: xterm-addon-attach: Attaches to a server running a process via a websocket xterm-addon-fit: Fits the terminal to the containing element xterm-addon-search: Adds search functionality xterm-addon-web-links: Adds web link detection and interaction Browser Support Since xterm.js is typically implemented as a developer tool, only modern browsers are supported officially. Specifically the latest versions of Chrome, Edge, Firefox, and Safari. Xterm.js works seamlessly in Electron apps and may even work on earlier versions of the browsers. These are the versions we strive to keep working. Node.js Support We also publish xterm-headless which is a stripped down version of xterm.js that runs in Node.js. An example use case for this is to keep track of a terminal's state where the process is running and using the serialize addon so it can get all state restored upon reconnection. API The full API for xterm.js is contained within the TypeScript declaration file, use the branch/tag picker in GitHub (w) to navigate to the correct version of the API. Note that some APIs are marked experimental, these are added to enable experimentation with new ideas without committing to support it like a normal semver API. Note that these APIs can change radically between versions, so be sure to read release notes if you plan on using experimental APIs. Releases Xterm.js follows a monthly release cycle roughly. All current and past releases are available on this repo's Releases page, you can view the high-level roadmap on the wiki and see what we're working on now by looking through Milestones. Beta builds Our CI releases beta builds to npm for every change that goes into master. Install the latest beta build with: npm install -S xterm@beta These should generally be stable, but some bugs may slip in. We recommend using the beta build primarily to test out new features and to verify bug fixes. Contributing You can read the guide on the wiki to learn how to contribute and set up xterm.js for development. Real-world uses Xterm.js is used in several world-class applications to provide great terminal experiences. SourceLair: In-browser IDE that provides its users with fully-featured Linux terminals based on xterm.js. Microsoft Visual Studio Code: Modern, versatile, and powerful open source code editor that provides an integrated terminal based on xterm.js. ttyd: A command-line tool for sharing terminal over the web, with fully-featured terminal emulation based on xterm.js. Katacoda: Katacoda is an Interactive Learning Platform for software developers, covering the latest Cloud Native technologies. Eclipse Che: Developer workspace server, cloud IDE, and Eclipse next-generation IDE. Codenvy: Cloud workspaces for development teams. CoderPad: Online interviewing platform for programmers. Run code in many programming languages, with results displayed by xterm.js. WebSSH2: A web based SSH2 client using xterm.js, socket.io, and ssh2. Spyder Terminal: A full fledged system terminal embedded on Spyder IDE. Cloud Commander: Orthodox web file manager with console and editor. Next Tech: Online platform for interactive coding and web development courses. Live container-backed terminal uses xterm.js. RStudio: RStudio is an integrated development environment (IDE) for R. Terminal for Atom: A simple terminal for the Atom text editor. Eclipse Orion: A modern, open source software development environment that runs in the cloud. Code, deploy, and run in the cloud. Gravitational Teleport: Gravitational Teleport is a modern SSH server for remotely accessing clusters of Linux servers via SSH or HTTPS. Hexlet: Practical programming courses (JavaScript, PHP, Unix, databases, functional programming). A steady path from the first line of code to the first job. Selenoid UI: Simple UI for the scalable golang implementation of Selenium Hub named Selenoid. We use XTerm for streaming logs over websockets from docker containers. Portainer: Simple management UI for Docker. SSHy: HTML5 Based SSHv2 Web Client with E2E encryption utilising xterm.js, SJCL & websockets. JupyterLab: An extensible computational environment for Jupyter, supporting interactive data science and scientific computing across all programming languages. Theia: Theia is a cloud & desktop IDE framework implemented in TypeScript. Opshell Ops Helper tool to make life easier working with AWS instances across multiple organizations. Proxmox VE: Proxmox VE is a complete open-source platform for enterprise virtualization. It uses xterm.js for container terminals and the host shell. Script Runner: Run scripts (or a shell) in Atom. Whack Whack Terminal: Terminal emulator for Visual Studio 2017. VTerm: Extensible terminal emulator based on Electron and React. electerm: electerm is a terminal/ssh/sftp client(mac, win, linux) based on electron/node-pty/xterm. Kubebox: Terminal console for Kubernetes clusters. Azure Cloud Shell: Azure Cloud Shell is a Microsoft-managed admin machine built on Azure, for Azure. atom-xterm: Atom plugin for providing terminals inside your Atom workspace. rtty: Access your terminals from anywhere via the web. Pisth: An SFTP and SSH client for iOS. abstruse: Abstruse CI is a continuous integration platform based on Node.JS and Docker. Azure Data Studio: A data management tool that enables working with SQL Server, Azure SQL DB and SQL DW from Windows, macOS and Linux. FreeMAN: A free, cross-platform file manager for power users. Fluent Terminal: A terminal emulator based on UWP and web technologies. Hyper: A terminal built on web technologies. Diag: A better way to troubleshoot problems faster. Capture, share and reapply troubleshooting knowledge so you can focus on solving problems that matter. GoTTY: A simple command line tool that shares your terminal as a web application based on xterm.js. genact: A nonsense activity generator. cPanel & WHM: The hosting platform of choice. Nutanix: Nutanix Enterprise Cloud uses xterm in the webssh functionality within Nutanix Calm, and is also looking to move our old noserial (termjs) functionality to xterm.js. SSH Web Client: SSH Web Client with PHP. Juno: A flexible Julia IDE, based on Atom. webssh: Web based ssh client. info-beamer hosted: Uses xterm.js to manage digital signage devices from the web dashboard. Jumpserver: Jumpserver Luna project, Jumpserver is a bastion server project, Luna use xterm.js for web terminal emulation. LxdMosaic: Uses xterm.js to give terminal access to containers through LXD CodeInterview.io: A coding interview platform in 25+ languages and many web frameworks. Uses xterm.js to provide shell access. Bastillion: Bastillion is an open-source web-based SSH console that centrally manages administrative access to systems. PHP App Server: Create lightweight, installable almost-native applications for desktop OSes. ExecTerminal (nicely wraps the xterm.js Terminal), TerminalManager, and RunProcessSDK are self-contained, reusable ES5+ compliant Javascript components. NgTerminal: NgTerminal is a web terminal that leverages xterm.js on Angular 7+. You can easily add it into your application by adding <ng-terminal></ng-terminal> into your component. tty-share: Extremely simple terminal sharing over the Internet. Ten Hands: One place to run your command-line tasks. WebAssembly.sh: A WebAssembly WASI browser terminal Gus: A shared coding pad where you can run Python with xterm.js Linode: Linode uses xterm.js to provide users a web console for their Linode instances. FluffOS: Active maintained LPMUD driver with websocket support. x-terminal: Atom plugin for providing terminals inside your Atom workspace. CoCalc: Lots of free software pre-installed, to chat, collaborate, develop, program, publish, research, share, teach, in C++, HTML, Julia, Jupyter, LaTeX, Markdown, Python, R, SageMath, Scala, ... Dank Domain: Open source multiuser medieval game supporting old & new terminal emulation. DockerStacks: Local LAMP/LEMP development studio Codecademy: Uses xterm.js in its courses on Bash. Laravel Ssh Web Client: Laravel server inventory with ssh web client to connect at server using xterm.js Replit: Collaborative browser based IDE with support for 50+ different languages. TeleType: cli tool that allows you to share your terminal online conveniently. Show off mad cli-fu, help a colleague, teach, or troubleshoot. Intervue: Pair programming for interviews. Multiple programming languages are supported, with results displayed by xterm.js. TRASA: Zero trust access to Web, SSH, RDP, and Database services. Commas: Commas is a hackable terminal and command runner. Devtron: Software Delivery Workflow For Kubernetes. NxShell: An easy to use new terminal for SSH. gifcast: Converts an asciinema cast to an animated GIF. WizardWebssh: A terminal with Pyqt5 Widget for embedding, which can be used as an ssh client to connect to your ssh servers. It is written in Python, based on tornado, paramiko, and xterm.js. Wizard Assistant: Wizard Assistant comes with advanced automation tools, preloaded common and special time-saving commands, and a built-in SSH terminal. Now you can remotely administer, troubleshoot, and analyze any system with ease. ucli: Command Line for everyone \uD83D\uDC68‍\uD83D\uDC69‍\uD83D\uDC67‍\uD83D\uDC66 at www.ucli.tech. Tess: Simple Terminal Fully Customizable for Everyone. Discover more at tessapp.dev HashiCorp Nomad: A container orchestrator with the ability to connect to remote tasks via a web interface using websockets and xterm.js. TermPair: View and control terminals from your browser with end-to-end encryption gdbgui: Browser-based frontend to gdb (gnu debugger) goormIDE: Run almost every programming languages with real-time collaboration, live pair programming, and built-in messenger. FleetDeck: Remote desktop & virtual terminal OpenSumi: A framework helps you quickly build Cloud or Desktop IDE products. KubeSail: The Self-Hosting Company - uses xterm to allow users to exec into kubernetes pods and build github apps WiTTY: Web-based interactive terminal emulator that allows users to easily record, share, and replay console sessions. libv86 Terminal Forwarding: Peer-to-peer SSH for the web, using WebRTC via Bugout for data transfer and v86 for web-based virtualization. hack.courses: Interactive Linux and command-line classes using xterm.js to expose a real terminal available for everyone. Render: Platform-as-a-service for your apps, websites, and databases using xterm.js to provide a command prompt for user containers and for streaming build and runtime logs. CloudTTY: A Friendly Kubernetes CloudShell (Web Terminal). Go SSH Web Client: A simple SSH web client using Go, WebSocket and Xterm.js. web3os: A decentralized operating system for the next web Cratecode: Learn to program for free through interactive online lessons. Cratecode uses xterm.js to give users access to their own Linux environment. Super Terminal: It is a http based terminal for developers who dont like repetition and save time. graSSHopper: A simple SSH client with file explorer, history and many more features. DomTerm: Tiles and tabs. Detachable sessions (like tmux). Remote connections using a nice ssh wrapper with predictive echo. Qt, Electron, Tauri/Wry, or desktop browser front-ends. Choose between xterm.js engine (faster) or native DomTerm (more functionality and graphics) - or both. Cloudtutor.io: innovative online learning platform that offers users access to an interactive lab. Helix Editor Playground: Online playground for the terminal based helix editor. Coder: Self-Hosted Remote Development Environments And much more... Do you use xterm.js in your application as well? Please open a Pull Request to include it here. We would love to have it on our list. Note: Please add any new contributions to the end of the list only. License Agreement If you contribute code to this project, you implicitly allow your code to be distributed under the MIT license. You are also implicitly verifying that all code is your original work. Copyright (c) 2017-2022, The xterm.js authors (MIT License) Copyright (c) 2014-2017, SourceLair, Private Company (www.sourcelair.com) (MIT License) Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)"
  },
  "P2PBootstrap/node_modules/xterm/src/browser/renderer/shared/README.html": {
    "href": "P2PBootstrap/node_modules/xterm/src/browser/renderer/shared/README.html",
    "title": "| P2PNetDocs",
    "summary": "This folder contains files that are shared between the renderer addons, but not necessarily bundled into the xterm module."
  },
  "P2PBootstrap/wwwroot/node_modules/xterm/README.html": {
    "href": "P2PBootstrap/wwwroot/node_modules/xterm/README.html",
    "title": "| P2PNetDocs",
    "summary": "Xterm.js is a front-end component written in TypeScript that lets applications bring fully-featured terminals to their users in the browser. It's used by popular projects such as VS Code, Hyper and Theia. Features Terminal apps just work: Xterm.js works with most terminal apps such as bash, vim, and tmux, including support for curses-based apps and mouse events. Performant: Xterm.js is really fast, it even includes a GPU-accelerated renderer. Rich Unicode support: Supports CJK, emojis, and IMEs. Self-contained: Requires zero dependencies to work. Accessible: Screen reader and minimum contrast ratio support can be turned on. And much more: Links, theming, addons, well documented API, etc. What xterm.js is not Xterm.js is not a terminal application that you can download and use on your computer. Xterm.js is not bash. Xterm.js can be connected to processes like bash and let you interact with them (provide input, receive output). Getting Started First, you need to install the module, we ship exclusively through npm, so you need that installed and then add xterm.js as a dependency by running: npm install xterm To start using xterm.js on your browser, add the xterm.js and xterm.css to the head of your HTML page. Then create a <div id=\"terminal\"></div> onto which xterm can attach itself. Finally, instantiate the Terminal object and then call the open function with the DOM object of the div. <!doctype html> <html> <head> <link rel=\"stylesheet\" href=\"node_modules/xterm/css/xterm.css\" /> <script src=\"node_modules/xterm/lib/xterm.js\"></script> </head> <body> <div id=\"terminal\"></div> <script> var term = new Terminal(); term.open(document.getElementById('terminal')); term.write('Hello from \\x1B[1;3;31mxterm.js\\x1B[0m $ ') </script> </body> </html> Importing The recommended way to load xterm.js is via the ES6 module syntax: import { Terminal } from 'xterm'; Addons ⚠️ This section describes the new addon format introduced in v3.14.0, see here for the instructions on the old format Addons are separate modules that extend the Terminal by building on the xterm.js API. To use an addon, you first need to install it in your project: npm i -S xterm-addon-web-links Then import the addon, instantiate it and call Terminal.loadAddon: import { Terminal } from 'xterm'; import { WebLinksAddon } from 'xterm-addon-web-links'; const terminal = new Terminal(); // Load WebLinksAddon on terminal, this is all that's needed to get web links // working in the terminal. terminal.loadAddon(new WebLinksAddon()); The xterm.js team maintains the following addons, but anyone can build them: xterm-addon-attach: Attaches to a server running a process via a websocket xterm-addon-fit: Fits the terminal to the containing element xterm-addon-search: Adds search functionality xterm-addon-web-links: Adds web link detection and interaction Browser Support Since xterm.js is typically implemented as a developer tool, only modern browsers are supported officially. Specifically the latest versions of Chrome, Edge, Firefox, and Safari. Xterm.js works seamlessly in Electron apps and may even work on earlier versions of the browsers. These are the versions we strive to keep working. Node.js Support We also publish xterm-headless which is a stripped down version of xterm.js that runs in Node.js. An example use case for this is to keep track of a terminal's state where the process is running and using the serialize addon so it can get all state restored upon reconnection. API The full API for xterm.js is contained within the TypeScript declaration file, use the branch/tag picker in GitHub (w) to navigate to the correct version of the API. Note that some APIs are marked experimental, these are added to enable experimentation with new ideas without committing to support it like a normal semver API. Note that these APIs can change radically between versions, so be sure to read release notes if you plan on using experimental APIs. Releases Xterm.js follows a monthly release cycle roughly. All current and past releases are available on this repo's Releases page, you can view the high-level roadmap on the wiki and see what we're working on now by looking through Milestones. Beta builds Our CI releases beta builds to npm for every change that goes into master. Install the latest beta build with: npm install -S xterm@beta These should generally be stable, but some bugs may slip in. We recommend using the beta build primarily to test out new features and to verify bug fixes. Contributing You can read the guide on the wiki to learn how to contribute and set up xterm.js for development. Real-world uses Xterm.js is used in several world-class applications to provide great terminal experiences. SourceLair: In-browser IDE that provides its users with fully-featured Linux terminals based on xterm.js. Microsoft Visual Studio Code: Modern, versatile, and powerful open source code editor that provides an integrated terminal based on xterm.js. ttyd: A command-line tool for sharing terminal over the web, with fully-featured terminal emulation based on xterm.js. Katacoda: Katacoda is an Interactive Learning Platform for software developers, covering the latest Cloud Native technologies. Eclipse Che: Developer workspace server, cloud IDE, and Eclipse next-generation IDE. Codenvy: Cloud workspaces for development teams. CoderPad: Online interviewing platform for programmers. Run code in many programming languages, with results displayed by xterm.js. WebSSH2: A web based SSH2 client using xterm.js, socket.io, and ssh2. Spyder Terminal: A full fledged system terminal embedded on Spyder IDE. Cloud Commander: Orthodox web file manager with console and editor. Next Tech: Online platform for interactive coding and web development courses. Live container-backed terminal uses xterm.js. RStudio: RStudio is an integrated development environment (IDE) for R. Terminal for Atom: A simple terminal for the Atom text editor. Eclipse Orion: A modern, open source software development environment that runs in the cloud. Code, deploy, and run in the cloud. Gravitational Teleport: Gravitational Teleport is a modern SSH server for remotely accessing clusters of Linux servers via SSH or HTTPS. Hexlet: Practical programming courses (JavaScript, PHP, Unix, databases, functional programming). A steady path from the first line of code to the first job. Selenoid UI: Simple UI for the scalable golang implementation of Selenium Hub named Selenoid. We use XTerm for streaming logs over websockets from docker containers. Portainer: Simple management UI for Docker. SSHy: HTML5 Based SSHv2 Web Client with E2E encryption utilising xterm.js, SJCL & websockets. JupyterLab: An extensible computational environment for Jupyter, supporting interactive data science and scientific computing across all programming languages. Theia: Theia is a cloud & desktop IDE framework implemented in TypeScript. Opshell Ops Helper tool to make life easier working with AWS instances across multiple organizations. Proxmox VE: Proxmox VE is a complete open-source platform for enterprise virtualization. It uses xterm.js for container terminals and the host shell. Script Runner: Run scripts (or a shell) in Atom. Whack Whack Terminal: Terminal emulator for Visual Studio 2017. VTerm: Extensible terminal emulator based on Electron and React. electerm: electerm is a terminal/ssh/sftp client(mac, win, linux) based on electron/node-pty/xterm. Kubebox: Terminal console for Kubernetes clusters. Azure Cloud Shell: Azure Cloud Shell is a Microsoft-managed admin machine built on Azure, for Azure. atom-xterm: Atom plugin for providing terminals inside your Atom workspace. rtty: Access your terminals from anywhere via the web. Pisth: An SFTP and SSH client for iOS. abstruse: Abstruse CI is a continuous integration platform based on Node.JS and Docker. Azure Data Studio: A data management tool that enables working with SQL Server, Azure SQL DB and SQL DW from Windows, macOS and Linux. FreeMAN: A free, cross-platform file manager for power users. Fluent Terminal: A terminal emulator based on UWP and web technologies. Hyper: A terminal built on web technologies. Diag: A better way to troubleshoot problems faster. Capture, share and reapply troubleshooting knowledge so you can focus on solving problems that matter. GoTTY: A simple command line tool that shares your terminal as a web application based on xterm.js. genact: A nonsense activity generator. cPanel & WHM: The hosting platform of choice. Nutanix: Nutanix Enterprise Cloud uses xterm in the webssh functionality within Nutanix Calm, and is also looking to move our old noserial (termjs) functionality to xterm.js. SSH Web Client: SSH Web Client with PHP. Juno: A flexible Julia IDE, based on Atom. webssh: Web based ssh client. info-beamer hosted: Uses xterm.js to manage digital signage devices from the web dashboard. Jumpserver: Jumpserver Luna project, Jumpserver is a bastion server project, Luna use xterm.js for web terminal emulation. LxdMosaic: Uses xterm.js to give terminal access to containers through LXD CodeInterview.io: A coding interview platform in 25+ languages and many web frameworks. Uses xterm.js to provide shell access. Bastillion: Bastillion is an open-source web-based SSH console that centrally manages administrative access to systems. PHP App Server: Create lightweight, installable almost-native applications for desktop OSes. ExecTerminal (nicely wraps the xterm.js Terminal), TerminalManager, and RunProcessSDK are self-contained, reusable ES5+ compliant Javascript components. NgTerminal: NgTerminal is a web terminal that leverages xterm.js on Angular 7+. You can easily add it into your application by adding <ng-terminal></ng-terminal> into your component. tty-share: Extremely simple terminal sharing over the Internet. Ten Hands: One place to run your command-line tasks. WebAssembly.sh: A WebAssembly WASI browser terminal Gus: A shared coding pad where you can run Python with xterm.js Linode: Linode uses xterm.js to provide users a web console for their Linode instances. FluffOS: Active maintained LPMUD driver with websocket support. x-terminal: Atom plugin for providing terminals inside your Atom workspace. CoCalc: Lots of free software pre-installed, to chat, collaborate, develop, program, publish, research, share, teach, in C++, HTML, Julia, Jupyter, LaTeX, Markdown, Python, R, SageMath, Scala, ... Dank Domain: Open source multiuser medieval game supporting old & new terminal emulation. DockerStacks: Local LAMP/LEMP development studio Codecademy: Uses xterm.js in its courses on Bash. Laravel Ssh Web Client: Laravel server inventory with ssh web client to connect at server using xterm.js Replit: Collaborative browser based IDE with support for 50+ different languages. TeleType: cli tool that allows you to share your terminal online conveniently. Show off mad cli-fu, help a colleague, teach, or troubleshoot. Intervue: Pair programming for interviews. Multiple programming languages are supported, with results displayed by xterm.js. TRASA: Zero trust access to Web, SSH, RDP, and Database services. Commas: Commas is a hackable terminal and command runner. Devtron: Software Delivery Workflow For Kubernetes. NxShell: An easy to use new terminal for SSH. gifcast: Converts an asciinema cast to an animated GIF. WizardWebssh: A terminal with Pyqt5 Widget for embedding, which can be used as an ssh client to connect to your ssh servers. It is written in Python, based on tornado, paramiko, and xterm.js. Wizard Assistant: Wizard Assistant comes with advanced automation tools, preloaded common and special time-saving commands, and a built-in SSH terminal. Now you can remotely administer, troubleshoot, and analyze any system with ease. ucli: Command Line for everyone \uD83D\uDC68‍\uD83D\uDC69‍\uD83D\uDC67‍\uD83D\uDC66 at www.ucli.tech. Tess: Simple Terminal Fully Customizable for Everyone. Discover more at tessapp.dev HashiCorp Nomad: A container orchestrator with the ability to connect to remote tasks via a web interface using websockets and xterm.js. TermPair: View and control terminals from your browser with end-to-end encryption gdbgui: Browser-based frontend to gdb (gnu debugger) goormIDE: Run almost every programming languages with real-time collaboration, live pair programming, and built-in messenger. FleetDeck: Remote desktop & virtual terminal OpenSumi: A framework helps you quickly build Cloud or Desktop IDE products. KubeSail: The Self-Hosting Company - uses xterm to allow users to exec into kubernetes pods and build github apps WiTTY: Web-based interactive terminal emulator that allows users to easily record, share, and replay console sessions. libv86 Terminal Forwarding: Peer-to-peer SSH for the web, using WebRTC via Bugout for data transfer and v86 for web-based virtualization. hack.courses: Interactive Linux and command-line classes using xterm.js to expose a real terminal available for everyone. Render: Platform-as-a-service for your apps, websites, and databases using xterm.js to provide a command prompt for user containers and for streaming build and runtime logs. CloudTTY: A Friendly Kubernetes CloudShell (Web Terminal). Go SSH Web Client: A simple SSH web client using Go, WebSocket and Xterm.js. web3os: A decentralized operating system for the next web Cratecode: Learn to program for free through interactive online lessons. Cratecode uses xterm.js to give users access to their own Linux environment. Super Terminal: It is a http based terminal for developers who dont like repetition and save time. graSSHopper: A simple SSH client with file explorer, history and many more features. DomTerm: Tiles and tabs. Detachable sessions (like tmux). Remote connections using a nice ssh wrapper with predictive echo. Qt, Electron, Tauri/Wry, or desktop browser front-ends. Choose between xterm.js engine (faster) or native DomTerm (more functionality and graphics) - or both. Cloudtutor.io: innovative online learning platform that offers users access to an interactive lab. Helix Editor Playground: Online playground for the terminal based helix editor. Coder: Self-Hosted Remote Development Environments And much more... Do you use xterm.js in your application as well? Please open a Pull Request to include it here. We would love to have it on our list. Note: Please add any new contributions to the end of the list only. License Agreement If you contribute code to this project, you implicitly allow your code to be distributed under the MIT license. You are also implicitly verifying that all code is your original work. Copyright (c) 2017-2022, The xterm.js authors (MIT License) Copyright (c) 2014-2017, SourceLair, Private Company (www.sourcelair.com) (MIT License) Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)"
  },
  "P2PBootstrap/wwwroot/node_modules/xterm/src/browser/renderer/shared/README.html": {
    "href": "P2PBootstrap/wwwroot/node_modules/xterm/src/browser/renderer/shared/README.html",
    "title": "| P2PNetDocs",
    "summary": "This folder contains files that are shared between the renderer addons, but not necessarily bundled into the xterm module."
  },
  "README.html": {
    "href": "README.html",
    "title": "P2PNet | P2PNetDocs",
    "summary": "P2PNet A .Net library toolkit for quickly building P2P network applications. About P2PNet facilitates peer-to-peer networking with an array of components for setting up your network. Initial peer discovery can be initiated in the LAN, and facilitated over a WAN utilizing various methods such as bootstrapping and IPv6 ICMP blasting. The PeerNetwork will be able to use a range of interoperable WAN and LAN discovery mechanisms to expand and grow the network, manage peer connections, and distribute data and information. Implementing the P2PNet library will make implementing peer-to-peer functionality in your application more seamless and integrated. LAN Discovery IPv6 Serverless Discovery Static Server Bootstrap NAT Holepunching File and Data Storage Status Dependency: WinPcap The P2PNet library requires WinPcap installed on the target system. You can check the releases for a working version that interops with the library. For automation, CI/CD and distribution you are advised to read the license guidelines. Bootstrap Server Container Docker image for launching an instance of the bootstrap server: See live example deployment: Documentation Technical overview and API documentation available down below:"
  },
  "api/P2PBootstrap.CLI.Command.CommandArg.html": {
    "href": "api/P2PBootstrap.CLI.Command.CommandArg.html",
    "title": "Class CommandArg | P2PNetDocs",
    "summary": "Class CommandArg Namespace P2PBootstrap.CLI.Command Assembly P2PBootstrap.dll public class CommandArg : ICommandArg Inheritance object CommandArg Implements ICommandArg Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Arg public string Arg { get; set; } Property Value string CommandArgDelegate public Func<string, CommandResponse> CommandArgDelegate { get; set; } Property Value Func<string, CommandResponse> Description public string Description { get; set; } Property Value string"
  },
  "api/P2PBootstrap.CLI.Command.CommandImplementations.Key_cmd.html": {
    "href": "api/P2PBootstrap.CLI.Command.CommandImplementations.Key_cmd.html",
    "title": "Class Key_cmd | P2PNetDocs",
    "summary": "Class Key_cmd Namespace P2PBootstrap.CLI.Command.CommandImplementations Assembly P2PBootstrap.dll public class Key_cmd : ICommand Inheritance object Key_cmd Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Key_cmd() public Key_cmd() Properties Args public Dictionary<string, ICommandArg> Args { get; set; } Property Value Dictionary<string, ICommandArg> Command public string Command { get; set; } Property Value string CommandDelegate public Func<List<ICommandArg>, CommandResponse> CommandDelegate { get; set; } Property Value Func<List<ICommandArg>, CommandResponse> Description public string Description { get; set; } Property Value string Help public string Help { get; set; } Property Value string Methods ExecuteCommand(List<ICommandArg>) public CommandResponse ExecuteCommand(List<ICommandArg> args) Parameters args List<ICommandArg> Returns CommandResponse"
  },
  "api/P2PBootstrap.CLI.Command.CommandImplementations.html": {
    "href": "api/P2PBootstrap.CLI.Command.CommandImplementations.html",
    "title": "Namespace P2PBootstrap.CLI.Command.CommandImplementations | P2PNetDocs",
    "summary": "Namespace P2PBootstrap.CLI.Command.CommandImplementations Classes Key_cmd"
  },
  "api/P2PBootstrap.CLI.Command.CommandResponse.html": {
    "href": "api/P2PBootstrap.CLI.Command.CommandResponse.html",
    "title": "Class CommandResponse | P2PNetDocs",
    "summary": "Class CommandResponse Namespace P2PBootstrap.CLI.Command Assembly P2PBootstrap.dll public record CommandResponse : IEquatable<CommandResponse> Inheritance object CommandResponse Implements IEquatable<CommandResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Response public string Response { get; set; } Property Value string Success public bool Success { get; set; } Property Value bool"
  },
  "api/P2PBootstrap.CLI.Command.ICommand.ICommand.html": {
    "href": "api/P2PBootstrap.CLI.Command.ICommand.ICommand.html",
    "title": "Interface ICommand | P2PNetDocs",
    "summary": "Interface ICommand Namespace P2PBootstrap.CLI.Command.ICommand Assembly P2PBootstrap.dll public interface ICommand Properties Args Dictionary<string, ICommandArg> Args { get; set; } Property Value Dictionary<string, ICommandArg> Command string Command { get; set; } Property Value string CommandDelegate Func<List<ICommandArg>, CommandResponse> CommandDelegate { get; set; } Property Value Func<List<ICommandArg>, CommandResponse> Description string Description { get; set; } Property Value string Help string Help { get; set; } Property Value string Methods ExecuteCommand(List<ICommandArg>) CommandResponse ExecuteCommand(List<ICommandArg> args) Parameters args List<ICommandArg> Returns CommandResponse"
  },
  "api/P2PBootstrap.CLI.Command.ICommand.ICommandArg.html": {
    "href": "api/P2PBootstrap.CLI.Command.ICommand.ICommandArg.html",
    "title": "Interface ICommandArg | P2PNetDocs",
    "summary": "Interface ICommandArg Namespace P2PBootstrap.CLI.Command.ICommand Assembly P2PBootstrap.dll public interface ICommandArg Properties Arg string Arg { get; set; } Property Value string CommandArgDelegate Func<string, CommandResponse> CommandArgDelegate { get; set; } Property Value Func<string, CommandResponse> Description string Description { get; set; } Property Value string"
  },
  "api/P2PBootstrap.CLI.Command.ICommand.html": {
    "href": "api/P2PBootstrap.CLI.Command.ICommand.html",
    "title": "Namespace P2PBootstrap.CLI.Command.ICommand | P2PNetDocs",
    "summary": "Namespace P2PBootstrap.CLI.Command.ICommand Interfaces ICommand ICommandArg"
  },
  "api/P2PBootstrap.CLI.Command.html": {
    "href": "api/P2PBootstrap.CLI.Command.html",
    "title": "Namespace P2PBootstrap.CLI.Command | P2PNetDocs",
    "summary": "Namespace P2PBootstrap.CLI.Command Classes CommandArg CommandResponse"
  },
  "api/P2PBootstrap.CLI.Parser.html": {
    "href": "api/P2PBootstrap.CLI.Parser.html",
    "title": "Class Parser | P2PNetDocs",
    "summary": "Class Parser Namespace P2PBootstrap.CLI Assembly P2PBootstrap.dll public static class Parser Inheritance object Parser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Commands public static Dictionary<string, ICommand> Commands Field Value Dictionary<string, ICommand> InputQueue public static Queue<string> InputQueue Field Value Queue<string> OutputQueue public static Queue<string> OutputQueue Field Value Queue<string> Properties ParserRunning public static bool ParserRunning { get; set; } Property Value bool Methods Initialize() public static void Initialize() ProcessCommand(string) public static CommandResponse ProcessCommand(string command) Parameters command string Returns CommandResponse ProcessInput(string) public static string ProcessInput(string input) Parameters input string Returns string"
  },
  "api/P2PBootstrap.CLI.html": {
    "href": "api/P2PBootstrap.CLI.html",
    "title": "Namespace P2PBootstrap.CLI | P2PNetDocs",
    "summary": "Namespace P2PBootstrap.CLI Classes Parser"
  },
  "api/P2PBootstrap.Database.DatabaseService.html": {
    "href": "api/P2PBootstrap.Database.DatabaseService.html",
    "title": "Class DatabaseService | P2PNetDocs",
    "summary": "Class DatabaseService Namespace P2PBootstrap.Database Assembly P2PBootstrap.dll public static class DatabaseService Inheritance object DatabaseService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AdminConsoleLog public static string AdminConsoleLog { get; } Property Value string DbRunning public static bool DbRunning { get; set; } Property Value bool LogsCLI_table public static Table_LogsCLI LogsCLI_table { get; set; } Property Value Table_LogsCLI SigningHistory_table public static Table_SigningHistory SigningHistory_table { get; set; } Property Value Table_SigningHistory Methods ExecuteTableCommand(string) public static void ExecuteTableCommand(string command) Parameters command string InitializeDatabase() public static void InitializeDatabase() UpdateMostRecentLogProcessed(bool) public static void UpdateMostRecentLogProcessed(bool processed) Parameters processed bool VerifyHashRecord(string) public static bool VerifyHashRecord(string hash) Parameters hash string Returns bool"
  },
  "api/P2PBootstrap.Database.Tables.EqualityCheck.html": {
    "href": "api/P2PBootstrap.Database.Tables.EqualityCheck.html",
    "title": "Enum EqualityCheck | P2PNetDocs",
    "summary": "Enum EqualityCheck Namespace P2PBootstrap.Database.Tables Assembly P2PBootstrap.dll public enum EqualityCheck Fields EqualTo = 0 NotEqualTo = 1"
  },
  "api/P2PBootstrap.Database.Tables.TableBase.html": {
    "href": "api/P2PBootstrap.Database.Tables.TableBase.html",
    "title": "Class TableBase | P2PNetDocs",
    "summary": "Class TableBase Namespace P2PBootstrap.Database.Tables Assembly P2PBootstrap.dll public class TableBase Inheritance object TableBase Derived Table_LogsCLI Table_SigningHistory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TableName public string TableName { get; set; } Property Value string Methods AddColumn(IColumn) public void AddColumn(IColumn column) Parameters column IColumn GetCreateTableCommand() public string GetCreateTableCommand() Returns string RunInsertCommand(Dictionary<string, string>) Generates an SQL insert command to insert multiple values into multiple target columns. public string RunInsertCommand(Dictionary<string, string> values) Parameters values Dictionary<string, string> A dictionary where the keys are the column names and the values are the corresponding values to be inserted. Returns string A string representing the SQL insert command. Exceptions ArgumentException Thrown if any of the target columns do not exist in the table. RunInsertCommand(string, string) Generates an SQL insert command to insert a single value into a target column. public string RunInsertCommand(string value, string targetColumn) Parameters value string The value to be inserted into the target column. targetColumn string The name of the column to insert the value into. Returns string A string representing the SQL insert command. Exceptions ArgumentException Thrown if the target column does not exist in the table. RunUpdateCommand(string, string, string, string, EqualityCheck) Generates an SQL update command to modify a value in the target column based on a condition involving another column and an equality check. public string RunUpdateCommand(string tableName, string targetColumn, string checkColumn, string value, EqualityCheck equalityCheck) Parameters tableName string The name of the table to update. targetColumn string The name of the column to modify. checkColumn string The name of the column to check the value against. value string The value to set in the target column and to check against in the check column. equalityCheck EqualityCheck The type of equality check to perform (EqualTo or NotEqualTo). Returns string A string representing the SQL update command. Exceptions ArgumentException Thrown if the target column or check column does not exist in the table."
  },
  "api/P2PBootstrap.Database.Tables.TableComponents.Column-1.html": {
    "href": "api/P2PBootstrap.Database.Tables.TableComponents.Column-1.html",
    "title": "Class Column<T> | P2PNetDocs",
    "summary": "Class Column<T> Namespace P2PBootstrap.Database.Tables.TableComponents Assembly P2PBootstrap.dll public class Column<T> : IColumn<T>, IColumn Type Parameters T Inheritance object Column<T> Implements IColumn<T> IColumn Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Column(ColumnOptions, string) public Column(ColumnOptions options, string columnName) Parameters options ColumnOptions columnName string Column(string) public Column(string columnName) Parameters columnName string Properties ColumnName public string ColumnName { get; set; } Property Value string Modifiers public List<string> Modifiers { get; set; } Property Value List<string> Methods GetColumnDefinition() public string GetColumnDefinition() Returns string ValidateType() public void ValidateType()"
  },
  "api/P2PBootstrap.Database.Tables.TableComponents.ColumnModifiers.html": {
    "href": "api/P2PBootstrap.Database.Tables.TableComponents.ColumnModifiers.html",
    "title": "Class ColumnModifiers | P2PNetDocs",
    "summary": "Class ColumnModifiers Namespace P2PBootstrap.Database.Tables.TableComponents Assembly P2PBootstrap.dll public static class ColumnModifiers Inheritance object ColumnModifiers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Modifiers public static readonly List<string> Modifiers Field Value List<string>"
  },
  "api/P2PBootstrap.Database.Tables.TableComponents.ColumnOptions.html": {
    "href": "api/P2PBootstrap.Database.Tables.TableComponents.ColumnOptions.html",
    "title": "Class ColumnOptions | P2PNetDocs",
    "summary": "Class ColumnOptions Namespace P2PBootstrap.Database.Tables.TableComponents Assembly P2PBootstrap.dll public class ColumnOptions Inheritance object ColumnOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Autoincrement public bool Autoincrement { get; set; } Property Value bool DefaultValue public object DefaultValue { get; set; } Property Value object ForeignKey public string ForeignKey { get; set; } Property Value string ForeignKeyReferences public string ForeignKeyReferences { get; set; } Property Value string HasDefault public bool HasDefault { get; set; } Property Value bool IsForeignKey public bool IsForeignKey { get; set; } Property Value bool IsPrimaryKey public bool IsPrimaryKey { get; set; } Property Value bool NotNull public bool NotNull { get; set; } Property Value bool Unique public bool Unique { get; set; } Property Value bool"
  },
  "api/P2PBootstrap.Database.Tables.TableComponents.IColumn-1.html": {
    "href": "api/P2PBootstrap.Database.Tables.TableComponents.IColumn-1.html",
    "title": "Interface IColumn<T> | P2PNetDocs",
    "summary": "Interface IColumn<T> Namespace P2PBootstrap.Database.Tables.TableComponents Assembly P2PBootstrap.dll public interface IColumn<T> : IColumn Type Parameters T Inherited Members IColumn.Modifiers IColumn.GetColumnDefinition() IColumn.ValidateType() IColumn.ColumnName"
  },
  "api/P2PBootstrap.Database.Tables.TableComponents.IColumn.html": {
    "href": "api/P2PBootstrap.Database.Tables.TableComponents.IColumn.html",
    "title": "Interface IColumn | P2PNetDocs",
    "summary": "Interface IColumn Namespace P2PBootstrap.Database.Tables.TableComponents Assembly P2PBootstrap.dll public interface IColumn Properties ColumnName string ColumnName { get; set; } Property Value string Modifiers List<string> Modifiers { get; set; } Property Value List<string> Methods GetColumnDefinition() string GetColumnDefinition() Returns string ValidateType() void ValidateType()"
  },
  "api/P2PBootstrap.Database.Tables.TableComponents.SQLiteCompatibleTypes.html": {
    "href": "api/P2PBootstrap.Database.Tables.TableComponents.SQLiteCompatibleTypes.html",
    "title": "Class SQLiteCompatibleTypes | P2PNetDocs",
    "summary": "Class SQLiteCompatibleTypes Namespace P2PBootstrap.Database.Tables.TableComponents Assembly P2PBootstrap.dll public static class SQLiteCompatibleTypes Inheritance object SQLiteCompatibleTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods EnsureSQLiteCompatible<T>() public static void EnsureSQLiteCompatible<T>() Type Parameters T GetSQLiteType<T>() public static string GetSQLiteType<T>() Returns string Type Parameters T"
  },
  "api/P2PBootstrap.Database.Tables.TableComponents.html": {
    "href": "api/P2PBootstrap.Database.Tables.TableComponents.html",
    "title": "Namespace P2PBootstrap.Database.Tables.TableComponents | P2PNetDocs",
    "summary": "Namespace P2PBootstrap.Database.Tables.TableComponents Classes ColumnModifiers ColumnOptions Column<T> SQLiteCompatibleTypes Interfaces IColumn IColumn<T>"
  },
  "api/P2PBootstrap.Database.Tables.Table_LogsCLI.html": {
    "href": "api/P2PBootstrap.Database.Tables.Table_LogsCLI.html",
    "title": "Class Table_LogsCLI | P2PNetDocs",
    "summary": "Class Table_LogsCLI Namespace P2PBootstrap.Database.Tables Assembly P2PBootstrap.dll public class Table_LogsCLI : TableBase Inheritance object TableBase Table_LogsCLI Inherited Members TableBase.TableName TableBase.AddColumn(IColumn) TableBase.RunInsertCommand(string, string) TableBase.RunInsertCommand(Dictionary<string, string>) TableBase.RunUpdateCommand(string, string, string, string, EqualityCheck) TableBase.GetCreateTableCommand() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Table_LogsCLI() public Table_LogsCLI()"
  },
  "api/P2PBootstrap.Database.Tables.Table_SigningHistory.html": {
    "href": "api/P2PBootstrap.Database.Tables.Table_SigningHistory.html",
    "title": "Class Table_SigningHistory | P2PNetDocs",
    "summary": "Class Table_SigningHistory Namespace P2PBootstrap.Database.Tables Assembly P2PBootstrap.dll public class Table_SigningHistory : TableBase Inheritance object TableBase Table_SigningHistory Inherited Members TableBase.TableName TableBase.AddColumn(IColumn) TableBase.RunInsertCommand(string, string) TableBase.RunInsertCommand(Dictionary<string, string>) TableBase.RunUpdateCommand(string, string, string, string, EqualityCheck) TableBase.GetCreateTableCommand() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Table_SigningHistory() public Table_SigningHistory()"
  },
  "api/P2PBootstrap.Database.Tables.html": {
    "href": "api/P2PBootstrap.Database.Tables.html",
    "title": "Namespace P2PBootstrap.Database.Tables | P2PNetDocs",
    "summary": "Namespace P2PBootstrap.Database.Tables Classes TableBase Table_LogsCLI Table_SigningHistory Enums EqualityCheck"
  },
  "api/P2PBootstrap.Database.html": {
    "href": "api/P2PBootstrap.Database.html",
    "title": "Namespace P2PBootstrap.Database | P2PNetDocs",
    "summary": "Namespace P2PBootstrap.Database Classes DatabaseService"
  },
  "api/P2PBootstrap.Encryption.EncryptionService.html": {
    "href": "api/P2PBootstrap.Encryption.EncryptionService.html",
    "title": "Class EncryptionService | P2PNetDocs",
    "summary": "Class EncryptionService Namespace P2PBootstrap.Encryption Assembly P2PBootstrap.dll public static class EncryptionService Inheritance object EncryptionService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GenNewPGPKey(string, ref CommandResponse) public static void GenNewPGPKey(string input, ref CommandResponse commandResponse) Parameters input string commandResponse CommandResponse Initialize() public static void Initialize() SignOffOnNetworkTask(ref NetworkTask) This will generate a unique hash of the NetworkTask. This hash will then be PGP clear signed, with the clear signed message then added to the NetworkTask under the \"Signature\" key. The hash and signature will then be recorded locally for reference. Recipients can then remove the \"Signature\" key, verify the clearn signed message, and verify the hash. public static void SignOffOnNetworkTask(ref NetworkTask networkTask) Parameters networkTask NetworkTask"
  },
  "api/P2PBootstrap.Encryption.Pgp.IKeyPair.html": {
    "href": "api/P2PBootstrap.Encryption.Pgp.IKeyPair.html",
    "title": "Interface IKeyPair | P2PNetDocs",
    "summary": "Interface IKeyPair Namespace P2PBootstrap.Encryption.Pgp Assembly P2PBootstrap.dll public interface IKeyPair Properties Private PGPKeyInfo Private { get; set; } Property Value PGPKeyInfo Public PGPKeyInfo Public { get; set; } Property Value PGPKeyInfo"
  },
  "api/P2PBootstrap.Encryption.Pgp.KeyPair.html": {
    "href": "api/P2PBootstrap.Encryption.Pgp.KeyPair.html",
    "title": "Class KeyPair | P2PNetDocs",
    "summary": "Class KeyPair Namespace P2PBootstrap.Encryption.Pgp Assembly P2PBootstrap.dll [Serializable] public class KeyPair : IKeyPair Inheritance object KeyPair Implements IKeyPair Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors KeyPair() public KeyPair() KeyPair(PGPKeyInfo, PGPKeyInfo) public KeyPair(PGPKeyInfo newPublic, PGPKeyInfo newPrivate) Parameters newPublic PGPKeyInfo newPrivate PGPKeyInfo Properties Private [JsonPropertyName(\"Private\")] public PGPKeyInfo Private { get; set; } Property Value PGPKeyInfo Public [JsonPropertyName(\"Public\")] public PGPKeyInfo Public { get; set; } Property Value PGPKeyInfo"
  },
  "api/P2PBootstrap.Encryption.Pgp.Keys.KeyRingDictionary-2.html": {
    "href": "api/P2PBootstrap.Encryption.Pgp.Keys.KeyRingDictionary-2.html",
    "title": "Class KeyRingDictionary<TKey, TValue> | P2PNetDocs",
    "summary": "Class KeyRingDictionary<TKey, TValue> Namespace P2PBootstrap.Encryption.Pgp.Keys Assembly P2PBootstrap.dll A dictionary that securely stores key pairs in a highly secure manner. public class KeyRingDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable where TValue : class, IKeyPair Type Parameters TKey TValue Inheritance object KeyRingDictionary<TKey, TValue> Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties this[TKey] public TValue this[TKey key] { get; set; } Parameters key TKey Property Value TValue Keys public ICollection<TKey> Keys { get; } Property Value ICollection<TKey> Values public ICollection<TValue> Values { get; } Property Value ICollection<TValue>"
  },
  "api/P2PBootstrap.Encryption.Pgp.Keys.PGPKeyInfo.html": {
    "href": "api/P2PBootstrap.Encryption.Pgp.Keys.PGPKeyInfo.html",
    "title": "Class PGPKeyInfo | P2PNetDocs",
    "summary": "Class PGPKeyInfo Namespace P2PBootstrap.Encryption.Pgp.Keys Assembly P2PBootstrap.dll [Serializable] public class PGPKeyInfo Inheritance object PGPKeyInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PGPKeyInfo() [JsonConstructor] public PGPKeyInfo() PGPKeyInfo(string, byte[]) public PGPKeyInfo(string name, byte[] keyData) Parameters name string keyData byte[] Properties KeyData [JsonPropertyName(\"KeyData\")] public byte[] KeyData { get; set; } Property Value byte[] Name [JsonPropertyName(\"Name\")] public string Name { get; set; } Property Value string"
  },
  "api/P2PBootstrap.Encryption.Pgp.Keys.html": {
    "href": "api/P2PBootstrap.Encryption.Pgp.Keys.html",
    "title": "Namespace P2PBootstrap.Encryption.Pgp.Keys | P2PNetDocs",
    "summary": "Namespace P2PBootstrap.Encryption.Pgp.Keys Classes KeyRingDictionary<TKey, TValue> A dictionary that securely stores key pairs in a highly secure manner."
  },
  "api/P2PBootstrap.Encryption.Pgp.PgpService.html": {
    "href": "api/P2PBootstrap.Encryption.Pgp.PgpService.html",
    "title": "Class PgpService | P2PNetDocs",
    "summary": "Class PgpService Namespace P2PBootstrap.Encryption.Pgp Assembly P2PBootstrap.dll public static class PgpService Inheritance object PgpService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllKeysList public static string AllKeysList { get; } Property Value string CurrentPGPPassphrase public static string CurrentPGPPassphrase { get; } Property Value string Methods ClearSignString(ref string) public static Task<bool> ClearSignString(ref string message) Parameters message string Returns Task<bool> GeneratePGPKeyPair(string, out string, string, string) public static bool GeneratePGPKeyPair(string seedphrase, out string message, string pub = \"public\", string priv = \"private\") Parameters seedphrase string message string pub string priv string Returns bool Initialize() public static void Initialize() LoadPGPKeysFromDirectory() public static void LoadPGPKeysFromDirectory() SetPGPPassphrase(string) public static void SetPGPPassphrase(string passphrase) Parameters passphrase string"
  },
  "api/P2PBootstrap.Encryption.Pgp.html": {
    "href": "api/P2PBootstrap.Encryption.Pgp.html",
    "title": "Namespace P2PBootstrap.Encryption.Pgp | P2PNetDocs",
    "summary": "Namespace P2PBootstrap.Encryption.Pgp Classes KeyPair PgpService Interfaces IKeyPair"
  },
  "api/P2PBootstrap.Encryption.html": {
    "href": "api/P2PBootstrap.Encryption.html",
    "title": "Namespace P2PBootstrap.Encryption | P2PNetDocs",
    "summary": "Namespace P2PBootstrap.Encryption Classes EncryptionService"
  },
  "api/P2PBootstrap.GlobalConfig.html": {
    "href": "api/P2PBootstrap.GlobalConfig.html",
    "title": "Class GlobalConfig | P2PNetDocs",
    "summary": "Class GlobalConfig Namespace P2PBootstrap Assembly P2PBootstrap.dll public static class GlobalConfig Inheritance object GlobalConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AppSettings public static IConfiguration AppSettings Field Value IConfiguration ConfigFile public const string ConfigFile = \"appsettings.json\" Field Value string _containerized public static bool _containerized Field Value bool Properties ActiveKeys public static KeyPair ActiveKeys { get; set; } Property Value KeyPair Methods CheckContainerEnvironment() public static void CheckContainerEnvironment() DbFileName() public static string DbFileName() Returns string KeysDirectory() public static string KeysDirectory() Returns string NetworkName() public static string NetworkName() Returns string PrivateKeyPath() public static string PrivateKeyPath() Returns string PublicKeyPath() public static string PublicKeyPath() Returns string SetTargetKeys() Sets the target keys in GlobalConfig to the keys specified in appsettings.json. public static void SetTargetKeys() TrustPolicy() public static PeerNetwork.TrustPolicies.BootstrapTrustPolicyType TrustPolicy() Returns PeerNetwork.TrustPolicies.BootstrapTrustPolicyType"
  },
  "api/P2PBootstrap.Program.html": {
    "href": "api/P2PBootstrap.Program.html",
    "title": "Class Program | P2PNetDocs",
    "summary": "Class Program Namespace P2PBootstrap Assembly P2PBootstrap.dll public class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PublicKeyToString public static string PublicKeyToString { get; } Property Value string Methods Main(string[]) public static void Main(string[] args) Parameters args string[] Test() public static void Test()"
  },
  "api/P2PBootstrap.html": {
    "href": "api/P2PBootstrap.html",
    "title": "Namespace P2PBootstrap | P2PNetDocs",
    "summary": "Namespace P2PBootstrap Classes GlobalConfig Program"
  },
  "api/P2PNet.DicoveryChannels.WAN.BootstrapChannel.html": {
    "href": "api/P2PNet.DicoveryChannels.WAN.BootstrapChannel.html",
    "title": "Class BootstrapChannel | P2PNetDocs",
    "summary": "Class BootstrapChannel Namespace P2PNet.DicoveryChannels.WAN Assembly P2PNet.dll Communicates with a bootstrap server to share known peers and establish identity in network. public class BootstrapChannel Inheritance object BootstrapChannel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Bootstrap server will direct connecting peers with a CollectionSharePacket and other means of conveying network information. Constructors BootstrapChannel(BootstrapChannelConnectionOptions) Initializes a new instance of the BootstrapChannel class using the specified connection options. If the options include a pre-specified BootstrapPeer, it is used; otherwise, a new BootstrapPeer is created from the endpoint. public BootstrapChannel(BootstrapChannelConnectionOptions options) Parameters options BootstrapChannelConnectionOptions An instance of BootstrapChannelConnectionOptions detailing the connection settings. BootstrapChannel(string, bool) Initializes a new instance of the BootstrapChannel class using the specified endpoint and authority mode. public BootstrapChannel(string endpoint, bool isAuthorityMode) Parameters endpoint string The endpoint URL of the bootstrap server. isAuthorityMode bool A boolean indicating if authority mode should be enabled. Properties BootstrapServer public BootstrapPeer BootstrapServer { get; set; } Property Value BootstrapPeer IsAuthorityMode public bool IsAuthorityMode { get; set; } Property Value bool PublicKey public string PublicKey { get; } Property Value string Methods OpenBootstrapChannel() Initiates the bootstrap handshake by sending an initial DataTransmissionPacket that embeds the peer’s identifying information. Then, it awaits the response from the bootstrap server. In trustless mode, the response is expected to be a CollectionSharePacket. In authority mode, the response is a DataTransmissionPacket containing a NetworkTask with the public key and peer list. public Task OpenBootstrapChannel() Returns Task A task representing the asynchronous handshake operation."
  },
  "api/P2PNet.DicoveryChannels.WAN.BootstrapChannelConnectionOptions.html": {
    "href": "api/P2PNet.DicoveryChannels.WAN.BootstrapChannelConnectionOptions.html",
    "title": "Class BootstrapChannelConnectionOptions | P2PNetDocs",
    "summary": "Class BootstrapChannelConnectionOptions Namespace P2PNet.DicoveryChannels.WAN Assembly P2PNet.dll Represents the configuration options for establishing a connection to a bootstrap server. The bootstrap server is used for peer discovery and identity establishment within the network. public class BootstrapChannelConnectionOptions Inheritance object BootstrapChannelConnectionOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BootstrapChannelConnectionOptions(string) Initializes a new instance of the BootstrapChannelConnectionOptions class using the specified endpoint. This constructor assumes non-authority mode and no explicit bootstrap peer. public BootstrapChannelConnectionOptions(string endpoint) Parameters endpoint string The endpoint URL of the bootstrap server. BootstrapChannelConnectionOptions(string, BootstrapPeer) Initializes a new instance of the BootstrapChannelConnectionOptions class using the specified endpoint and bootstrap peer. Authority mode will be set to false. public BootstrapChannelConnectionOptions(string endpoint, BootstrapPeer bootstrapPeer) Parameters endpoint string The endpoint URL of the bootstrap server. bootstrapPeer BootstrapPeer An instance of BootstrapPeer representing the bootstrap server. BootstrapChannelConnectionOptions(string, bool) Initializes a new instance of the BootstrapChannelConnectionOptions class using the specified endpoint and authority mode. public BootstrapChannelConnectionOptions(string endpoint, bool isAuthorityMode) Parameters endpoint string The endpoint URL of the bootstrap server. isAuthorityMode bool A boolean indicating if authority mode should be enabled. BootstrapChannelConnectionOptions(string, bool, BootstrapPeer) Initializes a new instance of the BootstrapChannelConnectionOptions class using all specified values. public BootstrapChannelConnectionOptions(string endpoint, bool isAuthorityMode, BootstrapPeer bootstrapPeer) Parameters endpoint string The endpoint URL of the bootstrap server. isAuthorityMode bool A boolean indicating if authority mode should be enabled. bootstrapPeer BootstrapPeer An instance of BootstrapPeer representing the bootstrap server. Properties BootstrapPeer Gets or sets the BootstrapPeer that represents the bootstrap server. This property is optional and can be provided for direct server communication. public BootstrapPeer BootstrapPeer { get; set; } Property Value BootstrapPeer Endpoint Gets or sets the endpoint URL of the bootstrap server. This value is required. public string Endpoint { get; set; } Property Value string IsAuthorityMode Gets or sets a value indicating whether the connection should run in authority mode. In authority mode, additional tasks such as fetching the public key are triggered. public bool IsAuthorityMode { get; set; } Property Value bool"
  },
  "api/P2PNet.DicoveryChannels.WAN.BootstrapPeer.html": {
    "href": "api/P2PNet.DicoveryChannels.WAN.BootstrapPeer.html",
    "title": "Class BootstrapPeer | P2PNetDocs",
    "summary": "Class BootstrapPeer Namespace P2PNet.DicoveryChannels.WAN Assembly P2PNet.dll Represents a bootstrap server using IPeer implementation. public class BootstrapPeer : IPeer Inheritance object BootstrapPeer Implements IPeer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BootstrapPeer() public BootstrapPeer() BootstrapPeer(IPAddress, int) For establishing a TCP connection to a bootstrap server. public BootstrapPeer(IPAddress ip, int port) Parameters ip IPAddress The IP address of the bootstrap server. port int The port of the bootstrap server. BootstrapPeer(string) For staging communication with bootstrap server via REST-like API. public BootstrapPeer(string URL) Parameters URL string The URL of the bootstrap server. BootstrapPeer(string, int) For staging communication with bootstrap server via REST-like API. public BootstrapPeer(string URL, int port) Parameters URL string The URL of the bootstrap server. port int The port of the bootstrap server. Properties Address Gets or sets the address for the peer. public string Address { get; set; } Property Value string Client Gets or sets the TCP client associated with the peer. public TcpClient Client { get; set; } Property Value TcpClient IP Gets or sets the IP address of the peer. public IPAddress IP { get; set; } Property Value IPAddress Identifier Gets or sets the unique identifier for the peer. public string Identifier { get; set; } Property Value string Port Gets or sets the port of the peer. public int Port { get; set; } Property Value int Stream Gets or sets the network stream associated with the peer. public NetworkStream Stream { get; set; } Property Value NetworkStream"
  },
  "api/P2PNet.DicoveryChannels.WAN.html": {
    "href": "api/P2PNet.DicoveryChannels.WAN.html",
    "title": "Namespace P2PNet.DicoveryChannels.WAN | P2PNetDocs",
    "summary": "Namespace P2PNet.DicoveryChannels.WAN Classes BootstrapChannel Communicates with a bootstrap server to share known peers and establish identity in network. BootstrapChannelConnectionOptions Represents the configuration options for establishing a connection to a bootstrap server. The bootstrap server is used for peer discovery and identity establishment within the network. BootstrapPeer Represents a bootstrap server using IPeer implementation."
  },
  "api/P2PNet.Distribution.CollectionSharePacketContext.html": {
    "href": "api/P2PNet.Distribution.CollectionSharePacketContext.html",
    "title": "Class CollectionSharePacketContext | P2PNetDocs",
    "summary": "Class CollectionSharePacketContext Namespace P2PNet.Distribution Assembly P2PNet.dll [JsonSerializable(typeof(CollectionSharePacket))] [JsonSerializable(typeof(IPeer))] [JsonDerivedType(typeof(GenericPeer), \"GenericPeer\")] public class CollectionSharePacketContext : JsonSerializerContext, IJsonTypeInfoResolver Inheritance object JsonSerializerContext CollectionSharePacketContext Implements IJsonTypeInfoResolver Inherited Members JsonSerializerContext.Options object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CollectionSharePacketContext() public CollectionSharePacketContext() CollectionSharePacketContext(JsonSerializerOptions) Creates an instance of JsonSerializerContext and binds it with the indicated JsonSerializerOptions. public CollectionSharePacketContext(JsonSerializerOptions options) Parameters options JsonSerializerOptions The run time provided options for the context instance. Properties CollectionSharePacket Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<CollectionSharePacket> CollectionSharePacket { get; } Property Value JsonTypeInfo<CollectionSharePacket> Default The default JsonSerializerContext associated with a default JsonSerializerOptions instance. public static CollectionSharePacketContext Default { get; } Property Value CollectionSharePacketContext GeneratedSerializerOptions The source-generated options associated with this context. protected override JsonSerializerOptions? GeneratedSerializerOptions { get; } Property Value JsonSerializerOptions GenericPeer Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<GenericPeer> GenericPeer { get; } Property Value JsonTypeInfo<GenericPeer> IPeer Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<IPeer> IPeer { get; } Property Value JsonTypeInfo<IPeer> Int32 Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<int> Int32 { get; } Property Value JsonTypeInfo<int> ListIPeer Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<List<IPeer>> ListIPeer { get; } Property Value JsonTypeInfo<List<IPeer>> String Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<string> String { get; } Property Value JsonTypeInfo<string> Methods GetTypeInfo(Type) Gets metadata for the specified type. public override JsonTypeInfo? GetTypeInfo(Type type) Parameters type Type The type to fetch metadata for. Returns JsonTypeInfo The metadata for the specified type, or null if the context has no metadata for the type."
  },
  "api/P2PNet.Distribution.DataTransmissionPacketContext.html": {
    "href": "api/P2PNet.Distribution.DataTransmissionPacketContext.html",
    "title": "Class DataTransmissionPacketContext | P2PNetDocs",
    "summary": "Class DataTransmissionPacketContext Namespace P2PNet.Distribution Assembly P2PNet.dll [JsonSerializable(typeof(DataTransmissionPacket))] public class DataTransmissionPacketContext : JsonSerializerContext, IJsonTypeInfoResolver Inheritance object JsonSerializerContext DataTransmissionPacketContext Implements IJsonTypeInfoResolver Inherited Members JsonSerializerContext.Options object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DataTransmissionPacketContext() public DataTransmissionPacketContext() DataTransmissionPacketContext(JsonSerializerOptions) Creates an instance of JsonSerializerContext and binds it with the indicated JsonSerializerOptions. public DataTransmissionPacketContext(JsonSerializerOptions options) Parameters options JsonSerializerOptions The run time provided options for the context instance. Properties ByteArray Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<byte[]> ByteArray { get; } Property Value JsonTypeInfo<byte[]> DataPayloadFormat Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<DistributionProtocol.DataPayloadFormat> DataPayloadFormat { get; } Property Value JsonTypeInfo<DistributionProtocol.DataPayloadFormat> DataTransmissionPacket Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<DataTransmissionPacket> DataTransmissionPacket { get; } Property Value JsonTypeInfo<DataTransmissionPacket> Default The default JsonSerializerContext associated with a default JsonSerializerOptions instance. public static DataTransmissionPacketContext Default { get; } Property Value DataTransmissionPacketContext GeneratedSerializerOptions The source-generated options associated with this context. protected override JsonSerializerOptions? GeneratedSerializerOptions { get; } Property Value JsonSerializerOptions Methods GetTypeInfo(Type) Gets metadata for the specified type. public override JsonTypeInfo? GetTypeInfo(Type type) Parameters type Type The type to fetch metadata for. Returns JsonTypeInfo The metadata for the specified type, or null if the context has no metadata for the type."
  },
  "api/P2PNet.Distribution.DisconnectPacketContext.html": {
    "href": "api/P2PNet.Distribution.DisconnectPacketContext.html",
    "title": "Class DisconnectPacketContext | P2PNetDocs",
    "summary": "Class DisconnectPacketContext Namespace P2PNet.Distribution Assembly P2PNet.dll [JsonSerializable(typeof(DisconnectPacket))] public class DisconnectPacketContext : JsonSerializerContext, IJsonTypeInfoResolver Inheritance object JsonSerializerContext DisconnectPacketContext Implements IJsonTypeInfoResolver Inherited Members JsonSerializerContext.Options object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DisconnectPacketContext() public DisconnectPacketContext() DisconnectPacketContext(JsonSerializerOptions) Creates an instance of JsonSerializerContext and binds it with the indicated JsonSerializerOptions. public DisconnectPacketContext(JsonSerializerOptions options) Parameters options JsonSerializerOptions The run time provided options for the context instance. Properties DateTime Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<DateTime> DateTime { get; } Property Value JsonTypeInfo<DateTime> Default The default JsonSerializerContext associated with a default JsonSerializerOptions instance. public static DisconnectPacketContext Default { get; } Property Value DisconnectPacketContext DictionaryStringString Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<Dictionary<string, string>> DictionaryStringString { get; } Property Value JsonTypeInfo<Dictionary<string, string>> DisconnectPacket Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<DisconnectPacket> DisconnectPacket { get; } Property Value JsonTypeInfo<DisconnectPacket> GeneratedSerializerOptions The source-generated options associated with this context. protected override JsonSerializerOptions? GeneratedSerializerOptions { get; } Property Value JsonSerializerOptions Int32 Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<int> Int32 { get; } Property Value JsonTypeInfo<int> String Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<string> String { get; } Property Value JsonTypeInfo<string> Methods GetTypeInfo(Type) Gets metadata for the specified type. public override JsonTypeInfo? GetTypeInfo(Type type) Parameters type Type The type to fetch metadata for. Returns JsonTypeInfo The metadata for the specified type, or null if the context has no metadata for the type."
  },
  "api/P2PNet.Distribution.DistributionHandler.html": {
    "href": "api/P2PNet.Distribution.DistributionHandler.html",
    "title": "Class DistributionHandler | P2PNetDocs",
    "summary": "Class DistributionHandler Namespace P2PNet.Distribution Assembly P2PNet.dll Provides methods and properties to handle data distribution to trusted peer channels. public static class DistributionHandler Inheritance object DistributionHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields incomingDataQueue Queue for incoming data packets to be processed. public static ConcurrentQueue<DataTransmissionPacket> incomingDataQueue Field Value ConcurrentQueue<DataTransmissionPacket> outgoingDataQueue Queue for outgoing data packets to be distributed to trusted peers. public static ConcurrentQueue<DataTransmissionPacket> outgoingDataQueue Field Value ConcurrentQueue<DataTransmissionPacket> Methods DistributeFileAsync(string) Distributes a file asynchronously by reading its contents and queuing it for distribution. public static Task DistributeFileAsync(string filePath) Parameters filePath string The path of the file to distribute. Returns Task A task that represents the asynchronous operation. EnqueueIncomingDataPacket(DataTransmissionPacket) Enqueues an incoming data packet for processing. public static Task EnqueueIncomingDataPacket(DataTransmissionPacket packet) Parameters packet DataTransmissionPacket The data packet to enqueue. Returns Task A task that represents the asynchronous operation. EnqueueIncomingDataPacket(string) Enqueues a serialized incoming data packet for processing. public static Task EnqueueIncomingDataPacket(string packet) Parameters packet string The serialized data packet to enqueue. Returns Task A task that represents the asynchronous operation. QueueDataForDistribution(DataTransmissionPacket) Queues a data packet for distribution. public static void QueueDataForDistribution(DataTransmissionPacket packet) Parameters packet DataTransmissionPacket The data packet to queue. QueueDataForDistribution(byte[], DataPayloadFormat) Queues raw data for distribution by wrapping it in a data transmission packet. public static void QueueDataForDistribution(byte[] data, DistributionProtocol.DataPayloadFormat dataType) Parameters data byte[] The raw data to queue. dataType DistributionProtocol.DataPayloadFormat The type of data being queued."
  },
  "api/P2PNet.Distribution.DistributionProtocol.DataPayloadFormat.html": {
    "href": "api/P2PNet.Distribution.DistributionProtocol.DataPayloadFormat.html",
    "title": "Enum DistributionProtocol.DataPayloadFormat | P2PNetDocs",
    "summary": "Enum DistributionProtocol.DataPayloadFormat Namespace P2PNet.Distribution Assembly P2PNet.dll public enum DistributionProtocol.DataPayloadFormat Fields File = 0 MiscData = 2 Task = 1"
  },
  "api/P2PNet.Distribution.DistributionProtocol.MessageTags.html": {
    "href": "api/P2PNet.Distribution.DistributionProtocol.MessageTags.html",
    "title": "Struct DistributionProtocol.MessageTags | P2PNetDocs",
    "summary": "Struct DistributionProtocol.MessageTags Namespace P2PNet.Distribution Assembly P2PNet.dll public struct DistributionProtocol.MessageTags Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields ClosingTag public string ClosingTag Field Value string OpeningTag public string OpeningTag Field Value string"
  },
  "api/P2PNet.Distribution.DistributionProtocol.PacketType.html": {
    "href": "api/P2PNet.Distribution.DistributionProtocol.PacketType.html",
    "title": "Enum DistributionProtocol.PacketType | P2PNetDocs",
    "summary": "Enum DistributionProtocol.PacketType Namespace P2PNet.Distribution Assembly P2PNet.dll public enum DistributionProtocol.PacketType Fields BADPACKET = 5 DataTransmissionPacket = 3 DisconnectPacket = 1 IdentityPacket = 0 PeerGroupPacket = 2 PureMessage = 4"
  },
  "api/P2PNet.Distribution.DistributionProtocol.PacketTypeRelay.html": {
    "href": "api/P2PNet.Distribution.DistributionProtocol.PacketTypeRelay.html",
    "title": "Struct DistributionProtocol.PacketTypeRelay | P2PNetDocs",
    "summary": "Struct DistributionProtocol.PacketTypeRelay Namespace P2PNet.Distribution Assembly P2PNet.dll public struct DistributionProtocol.PacketTypeRelay Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Data public string Data Field Value string packetType public DistributionProtocol.PacketType packetType Field Value DistributionProtocol.PacketType"
  },
  "api/P2PNet.Distribution.DistributionProtocol.html": {
    "href": "api/P2PNet.Distribution.DistributionProtocol.html",
    "title": "Class DistributionProtocol | P2PNetDocs",
    "summary": "Class DistributionProtocol Namespace P2PNet.Distribution Assembly P2PNet.dll The DistributionProtocol provides uniformity with data exchange, packet formatting, and other functions within the P2P network. This should be included as a static reference. public static class DistributionProtocol Inheritance object DistributionProtocol Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DataFormatTagMap public static readonly Dictionary<DistributionProtocol.DataPayloadFormat, DistributionProtocol.MessageTags> DataFormatTagMap Field Value Dictionary<DistributionProtocol.DataPayloadFormat, DistributionProtocol.MessageTags> PacketTagMap public static readonly Dictionary<DistributionProtocol.PacketType, DistributionProtocol.MessageTags> PacketTagMap Field Value Dictionary<DistributionProtocol.PacketType, DistributionProtocol.MessageTags> Methods Deserialize<T>(string) This implementation of JSON deserialization is used specifically for the following types: DataTransmissionPacket CollectionSharePacket IdentifierPacket PureMessagePacket public static T Deserialize<T>(string json) Parameters json string The serialized string representation of the Type. Returns T Returns a Type of object from a JSON serialized string. Type Parameters T The Type of the object being deserialized. Serialize<T>(T) This implementation of JSON serialization is used specifically for the following types: DataTransmissionPacket CollectionSharePacket IdentifierPacket PureMessagePacket public static string Serialize<T>(T obj) Parameters obj T The target object being serialized. Returns string Returns a JSON serialized string of the target object. Type Parameters T The Type of the object being serialized. UnwrapData(DataTransmissionPacket) Removes the DataFormatTagMap tags that are placed in the byte[] payload of the DataTransmissionPacket. These tags are automatically placed upon instantiation in the constructor to help identify and handle the payload throughout its lifecycle. It is necessary to unwrap the data before processing it, which should be primarily done in the DistributionHandler public static byte[] UnwrapData(DataTransmissionPacket packet) Parameters packet DataTransmissionPacket The packet whose payloads needs extracting Returns byte[] The payload of the packet with the opening and closing data format tags removed (ie the raw data). Exceptions InvalidDataException WrapPacket(PacketType, ref string) Wraps the packet data with the appropriate tags for transmission through the network. This helps the receiving peer identify the packet type and data. public static void WrapPacket(DistributionProtocol.PacketType packetType, ref string data) Parameters packetType DistributionProtocol.PacketType The type of packet being readied for transmissiion through the network. data string This should be the JSON serialized string of the packet before transmission."
  },
  "api/P2PNet.Distribution.EncryptionAndSecurityHandler.html": {
    "href": "api/P2PNet.Distribution.EncryptionAndSecurityHandler.html",
    "title": "Class EncryptionAndSecurityHandler | P2PNetDocs",
    "summary": "Class EncryptionAndSecurityHandler Namespace P2PNet.Distribution Assembly P2PNet.dll public static class EncryptionAndSecurityHandler Inheritance object EncryptionAndSecurityHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods VerifySignature(string, string) Verifies a clear signed message using the provided public key. public static Task<bool> VerifySignature(string signature, string pubKey) Parameters signature string A string represenation of the clear signed message. pubKey string A string representation of the public key being checked against. Returns Task<bool> True if this is a valid signature, otherwise false."
  },
  "api/P2PNet.Distribution.GenericPeerContext.html": {
    "href": "api/P2PNet.Distribution.GenericPeerContext.html",
    "title": "Class GenericPeerContext | P2PNetDocs",
    "summary": "Class GenericPeerContext Namespace P2PNet.Distribution Assembly P2PNet.dll [JsonSerializable(typeof(GenericPeer))] public class GenericPeerContext : JsonSerializerContext, IJsonTypeInfoResolver Inheritance object JsonSerializerContext GenericPeerContext Implements IJsonTypeInfoResolver Inherited Members JsonSerializerContext.Options object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GenericPeerContext() public GenericPeerContext() GenericPeerContext(JsonSerializerOptions) Creates an instance of JsonSerializerContext and binds it with the indicated JsonSerializerOptions. public GenericPeerContext(JsonSerializerOptions options) Parameters options JsonSerializerOptions The run time provided options for the context instance. Properties Default The default JsonSerializerContext associated with a default JsonSerializerOptions instance. public static GenericPeerContext Default { get; } Property Value GenericPeerContext GeneratedSerializerOptions The source-generated options associated with this context. protected override JsonSerializerOptions? GeneratedSerializerOptions { get; } Property Value JsonSerializerOptions GenericPeer Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<GenericPeer> GenericPeer { get; } Property Value JsonTypeInfo<GenericPeer> Int32 Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<int> Int32 { get; } Property Value JsonTypeInfo<int> String Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<string> String { get; } Property Value JsonTypeInfo<string> Methods GetTypeInfo(Type) Gets metadata for the specified type. public override JsonTypeInfo? GetTypeInfo(Type type) Parameters type Type The type to fetch metadata for. Returns JsonTypeInfo The metadata for the specified type, or null if the context has no metadata for the type."
  },
  "api/P2PNet.Distribution.GenericPeerListContext.html": {
    "href": "api/P2PNet.Distribution.GenericPeerListContext.html",
    "title": "Class GenericPeerListContext | P2PNetDocs",
    "summary": "Class GenericPeerListContext Namespace P2PNet.Distribution Assembly P2PNet.dll [JsonSerializable(typeof(List<GenericPeer>))] public class GenericPeerListContext : JsonSerializerContext, IJsonTypeInfoResolver Inheritance object JsonSerializerContext GenericPeerListContext Implements IJsonTypeInfoResolver Inherited Members JsonSerializerContext.Options object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GenericPeerListContext() public GenericPeerListContext() GenericPeerListContext(JsonSerializerOptions) Creates an instance of JsonSerializerContext and binds it with the indicated JsonSerializerOptions. public GenericPeerListContext(JsonSerializerOptions options) Parameters options JsonSerializerOptions The run time provided options for the context instance. Properties Default The default JsonSerializerContext associated with a default JsonSerializerOptions instance. public static GenericPeerListContext Default { get; } Property Value GenericPeerListContext GeneratedSerializerOptions The source-generated options associated with this context. protected override JsonSerializerOptions? GeneratedSerializerOptions { get; } Property Value JsonSerializerOptions GenericPeer Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<GenericPeer> GenericPeer { get; } Property Value JsonTypeInfo<GenericPeer> Int32 Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<int> Int32 { get; } Property Value JsonTypeInfo<int> ListGenericPeer Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<List<GenericPeer>> ListGenericPeer { get; } Property Value JsonTypeInfo<List<GenericPeer>> String Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<string> String { get; } Property Value JsonTypeInfo<string> Methods GetTypeInfo(Type) Gets metadata for the specified type. public override JsonTypeInfo? GetTypeInfo(Type type) Parameters type Type The type to fetch metadata for. Returns JsonTypeInfo The metadata for the specified type, or null if the context has no metadata for the type."
  },
  "api/P2PNet.Distribution.IPeerContext.html": {
    "href": "api/P2PNet.Distribution.IPeerContext.html",
    "title": "Class IPeerContext | P2PNetDocs",
    "summary": "Class IPeerContext Namespace P2PNet.Distribution Assembly P2PNet.dll [JsonSerializable(typeof(IPeer))] public class IPeerContext : JsonSerializerContext, IJsonTypeInfoResolver Inheritance object JsonSerializerContext IPeerContext Implements IJsonTypeInfoResolver Inherited Members JsonSerializerContext.Options object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IPeerContext() public IPeerContext() IPeerContext(JsonSerializerOptions) Creates an instance of JsonSerializerContext and binds it with the indicated JsonSerializerOptions. public IPeerContext(JsonSerializerOptions options) Parameters options JsonSerializerOptions The run time provided options for the context instance. Properties Default The default JsonSerializerContext associated with a default JsonSerializerOptions instance. public static IPeerContext Default { get; } Property Value IPeerContext GeneratedSerializerOptions The source-generated options associated with this context. protected override JsonSerializerOptions? GeneratedSerializerOptions { get; } Property Value JsonSerializerOptions GenericPeer Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<GenericPeer> GenericPeer { get; } Property Value JsonTypeInfo<GenericPeer> IPeer Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<IPeer> IPeer { get; } Property Value JsonTypeInfo<IPeer> Int32 Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<int> Int32 { get; } Property Value JsonTypeInfo<int> String Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<string> String { get; } Property Value JsonTypeInfo<string> Methods GetTypeInfo(Type) Gets metadata for the specified type. public override JsonTypeInfo? GetTypeInfo(Type type) Parameters type Type The type to fetch metadata for. Returns JsonTypeInfo The metadata for the specified type, or null if the context has no metadata for the type."
  },
  "api/P2PNet.Distribution.IPeerListContext.html": {
    "href": "api/P2PNet.Distribution.IPeerListContext.html",
    "title": "Class IPeerListContext | P2PNetDocs",
    "summary": "Class IPeerListContext Namespace P2PNet.Distribution Assembly P2PNet.dll [JsonSerializable(typeof(List<IPeer>))] public class IPeerListContext : JsonSerializerContext, IJsonTypeInfoResolver Inheritance object JsonSerializerContext IPeerListContext Implements IJsonTypeInfoResolver Inherited Members JsonSerializerContext.Options object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IPeerListContext() public IPeerListContext() IPeerListContext(JsonSerializerOptions) Creates an instance of JsonSerializerContext and binds it with the indicated JsonSerializerOptions. public IPeerListContext(JsonSerializerOptions options) Parameters options JsonSerializerOptions The run time provided options for the context instance. Properties Default The default JsonSerializerContext associated with a default JsonSerializerOptions instance. public static IPeerListContext Default { get; } Property Value IPeerListContext GeneratedSerializerOptions The source-generated options associated with this context. protected override JsonSerializerOptions? GeneratedSerializerOptions { get; } Property Value JsonSerializerOptions GenericPeer Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<GenericPeer> GenericPeer { get; } Property Value JsonTypeInfo<GenericPeer> IPeer Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<IPeer> IPeer { get; } Property Value JsonTypeInfo<IPeer> Int32 Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<int> Int32 { get; } Property Value JsonTypeInfo<int> ListIPeer Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<List<IPeer>> ListIPeer { get; } Property Value JsonTypeInfo<List<IPeer>> String Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<string> String { get; } Property Value JsonTypeInfo<string> Methods GetTypeInfo(Type) Gets metadata for the specified type. public override JsonTypeInfo? GetTypeInfo(Type type) Parameters type Type The type to fetch metadata for. Returns JsonTypeInfo The metadata for the specified type, or null if the context has no metadata for the type."
  },
  "api/P2PNet.Distribution.IdentifierPacketContext.html": {
    "href": "api/P2PNet.Distribution.IdentifierPacketContext.html",
    "title": "Class IdentifierPacketContext | P2PNetDocs",
    "summary": "Class IdentifierPacketContext Namespace P2PNet.Distribution Assembly P2PNet.dll [JsonSerializable(typeof(IdentifierPacket))] public class IdentifierPacketContext : JsonSerializerContext, IJsonTypeInfoResolver Inheritance object JsonSerializerContext IdentifierPacketContext Implements IJsonTypeInfoResolver Inherited Members JsonSerializerContext.Options object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IdentifierPacketContext() public IdentifierPacketContext() IdentifierPacketContext(JsonSerializerOptions) Creates an instance of JsonSerializerContext and binds it with the indicated JsonSerializerOptions. public IdentifierPacketContext(JsonSerializerOptions options) Parameters options JsonSerializerOptions The run time provided options for the context instance. Properties Default The default JsonSerializerContext associated with a default JsonSerializerOptions instance. public static IdentifierPacketContext Default { get; } Property Value IdentifierPacketContext GeneratedSerializerOptions The source-generated options associated with this context. protected override JsonSerializerOptions? GeneratedSerializerOptions { get; } Property Value JsonSerializerOptions IdentifierPacket Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<IdentifierPacket> IdentifierPacket { get; } Property Value JsonTypeInfo<IdentifierPacket> Int32 Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<int> Int32 { get; } Property Value JsonTypeInfo<int> String Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<string> String { get; } Property Value JsonTypeInfo<string> Methods GetTypeInfo(Type) Gets metadata for the specified type. public override JsonTypeInfo? GetTypeInfo(Type type) Parameters type Type The type to fetch metadata for. Returns JsonTypeInfo The metadata for the specified type, or null if the context has no metadata for the type."
  },
  "api/P2PNet.Distribution.NetworkTaskContext.html": {
    "href": "api/P2PNet.Distribution.NetworkTaskContext.html",
    "title": "Class NetworkTaskContext | P2PNetDocs",
    "summary": "Class NetworkTaskContext Namespace P2PNet.Distribution Assembly P2PNet.dll [JsonSerializable(typeof(NetworkTask))] public class NetworkTaskContext : JsonSerializerContext, IJsonTypeInfoResolver Inheritance object JsonSerializerContext NetworkTaskContext Implements IJsonTypeInfoResolver Inherited Members JsonSerializerContext.Options object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkTaskContext() public NetworkTaskContext() NetworkTaskContext(JsonSerializerOptions) Creates an instance of JsonSerializerContext and binds it with the indicated JsonSerializerOptions. public NetworkTaskContext(JsonSerializerOptions options) Parameters options JsonSerializerOptions The run time provided options for the context instance. Properties Default The default JsonSerializerContext associated with a default JsonSerializerOptions instance. public static NetworkTaskContext Default { get; } Property Value NetworkTaskContext DictionaryStringString Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<Dictionary<string, string>> DictionaryStringString { get; } Property Value JsonTypeInfo<Dictionary<string, string>> GeneratedSerializerOptions The source-generated options associated with this context. protected override JsonSerializerOptions? GeneratedSerializerOptions { get; } Property Value JsonSerializerOptions NetworkTask Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<NetworkTask> NetworkTask { get; } Property Value JsonTypeInfo<NetworkTask> String Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<string> String { get; } Property Value JsonTypeInfo<string> TaskType Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<TaskType> TaskType { get; } Property Value JsonTypeInfo<TaskType> Methods GetTypeInfo(Type) Gets metadata for the specified type. public override JsonTypeInfo? GetTypeInfo(Type type) Parameters type Type The type to fetch metadata for. Returns JsonTypeInfo The metadata for the specified type, or null if the context has no metadata for the type."
  },
  "api/P2PNet.Distribution.NetworkTaskHandler.html": {
    "href": "api/P2PNet.Distribution.NetworkTaskHandler.html",
    "title": "Class NetworkTaskHandler | P2PNetDocs",
    "summary": "Class NetworkTaskHandler Namespace P2PNet.Distribution Assembly P2PNet.dll public static class NetworkTaskHandler Inheritance object NetworkTaskHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields incomingNetworkTasks Queue for incoming data packets to be processed. public static ConcurrentQueue<NetworkTask> incomingNetworkTasks Field Value ConcurrentQueue<NetworkTask> outgoingNetworkTasks Queue for outgoing data packets to be distributed to trusted peers. public static ConcurrentQueue<NetworkTask> outgoingNetworkTasks Field Value ConcurrentQueue<NetworkTask>"
  },
  "api/P2PNet.Distribution.NetworkTasks.NetworkTask.html": {
    "href": "api/P2PNet.Distribution.NetworkTasks.NetworkTask.html",
    "title": "Class NetworkTask | P2PNetDocs",
    "summary": "Class NetworkTask Namespace P2PNet.Distribution.NetworkTasks Assembly P2PNet.dll Represents a network task that can be executed within the peer-to-peer network. public sealed class NetworkTask Inheritance object NetworkTask Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks A network task defines an action to be performed, such as blocking a peer, sending a message, or synchronizing data. Each task is identified by a TaskType and can include additional data in the form of key-value pairs. Constructors NetworkTask() [JsonConstructor] public NetworkTask() Properties TaskData public Dictionary<string, string> TaskData { get; set; } Property Value Dictionary<string, string> TaskType public TaskType TaskType { get; set; } Property Value TaskType Methods ToByte() public byte[] ToByte() Returns byte[]"
  },
  "api/P2PNet.Distribution.NetworkTasks.TaskType.html": {
    "href": "api/P2PNet.Distribution.NetworkTasks.TaskType.html",
    "title": "Enum TaskType | P2PNetDocs",
    "summary": "Enum TaskType Namespace P2PNet.Distribution.NetworkTasks Assembly P2PNet.dll Defines the types of tasks that can be executed within the peer-to-peer network. public enum TaskType Fields AssignIdentifierToPeer = 17 Set the identifier of a peer to the specified value. AuthorizePeer = 5 Authorize a peer to perform certain actions or access certain resources. BlockAndRemovePeer = 0 Block a peer and removes it from the network. BlockIP = 1 Block a specific IP address from connecting to the network. BootstrapInitialization = 14 Send the public key and peer list to the peer from the bootstrap server. DisconnectPeer = 4 Disconnect a specific peer from the network. Heartbeat = 15 Send a heartbeat signal to a bootstrap server. This can be useful with bootstrap servers to track if peers are still live or drop off the network. PingPeer = 3 Send a ping to a specific peer to check its availability. RequestData = 7 Request specific data from a peer. RequestPublicKey = 13 Request the public key of a peer or bootstrap server. RequestVerifyHashRecord = 11 A request to verify the existence of a hash record. RequestVerifySignature = 12 Verify the PGP signature of a message or command. RevokePeerAuthorization = 6 Revoke the authorization of a peer. SendData = 8 Send specific data to a peer. SendMessage = 2 Send a message to a specific peer or group of peers. SetLocalIdentifier = 16 Set the local identifier to the specified value. This can be useful with the Authority trust policy to assign unique IDs to peers. SynchronizeData = 9 Synchronize data between peers. UpdateSettings = 10 Update network settings or peer settings."
  },
  "api/P2PNet.Distribution.NetworkTasks.html": {
    "href": "api/P2PNet.Distribution.NetworkTasks.html",
    "title": "Namespace P2PNet.Distribution.NetworkTasks | P2PNetDocs",
    "summary": "Namespace P2PNet.Distribution.NetworkTasks Classes NetworkTask Represents a network task that can be executed within the peer-to-peer network. Enums TaskType Defines the types of tasks that can be executed within the peer-to-peer network."
  },
  "api/P2PNet.Distribution.P2PNet.Distribution.PacketHandleProtocol.html": {
    "href": "api/P2PNet.Distribution.P2PNet.Distribution.PacketHandleProtocol.html",
    "title": "Class PacketHandleProtocol | P2PNetDocs",
    "summary": "Class PacketHandleProtocol Namespace P2PNet.Distribution.P2PNet.Distribution Assembly P2PNet.dll Provides protocol actions for handling different types of packets received by PeerChannel instances. public static class PacketHandleProtocol Inheritance object PacketHandleProtocol Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks When a PeerChannel receives an inbound packet, it will invoke the respective Action while passing the data to the delegate. Properties HandleDataTransmissionPacketAction Action to handle data transmission packets. public static Action<string> HandleDataTransmissionPacketAction { get; set; } Property Value Action<string> HandleDisconnectPacketAction Action to handle disconnect packets. public static Action<string> HandleDisconnectPacketAction { get; set; } Property Value Action<string> HandleIdentityPacketAction Action to handle identity packets. public static Action<string> HandleIdentityPacketAction { get; set; } Property Value Action<string> HandlePeerGroupPacketAction Action to handle peer group packets. public static Action<string> HandlePeerGroupPacketAction { get; set; } Property Value Action<string> HandlePureMessagePacketAction Action to handle pure message packets. public static Action<string> HandlePureMessagePacketAction { get; set; } Property Value Action<string>"
  },
  "api/P2PNet.Distribution.P2PNet.Distribution.html": {
    "href": "api/P2PNet.Distribution.P2PNet.Distribution.html",
    "title": "Namespace P2PNet.Distribution.P2PNet.Distribution | P2PNetDocs",
    "summary": "Namespace P2PNet.Distribution.P2PNet.Distribution Classes PacketHandleProtocol Provides protocol actions for handling different types of packets received by PeerChannel instances."
  },
  "api/P2PNet.Distribution.PGPKeyInfo.html": {
    "href": "api/P2PNet.Distribution.PGPKeyInfo.html",
    "title": "Class PGPKeyInfo | P2PNetDocs",
    "summary": "Class PGPKeyInfo Namespace P2PNet.Distribution Assembly P2PNet.dll [Serializable] public class PGPKeyInfo Inheritance object PGPKeyInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PGPKeyInfo() [JsonConstructor] public PGPKeyInfo() PGPKeyInfo(string, byte[]) public PGPKeyInfo(string name, byte[] keyData) Parameters name string keyData byte[] Properties KeyData [JsonPropertyName(\"KeyData\")] public byte[] KeyData { get; set; } Property Value byte[] Name [JsonPropertyName(\"Name\")] public string Name { get; set; } Property Value string"
  },
  "api/P2PNet.Distribution.PureMessagePacketContext.html": {
    "href": "api/P2PNet.Distribution.PureMessagePacketContext.html",
    "title": "Class PureMessagePacketContext | P2PNetDocs",
    "summary": "Class PureMessagePacketContext Namespace P2PNet.Distribution Assembly P2PNet.dll [JsonSerializable(typeof(PureMessagePacket))] public class PureMessagePacketContext : JsonSerializerContext, IJsonTypeInfoResolver Inheritance object JsonSerializerContext PureMessagePacketContext Implements IJsonTypeInfoResolver Inherited Members JsonSerializerContext.Options object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PureMessagePacketContext() public PureMessagePacketContext() PureMessagePacketContext(JsonSerializerOptions) Creates an instance of JsonSerializerContext and binds it with the indicated JsonSerializerOptions. public PureMessagePacketContext(JsonSerializerOptions options) Parameters options JsonSerializerOptions The run time provided options for the context instance. Properties Default The default JsonSerializerContext associated with a default JsonSerializerOptions instance. public static PureMessagePacketContext Default { get; } Property Value PureMessagePacketContext GeneratedSerializerOptions The source-generated options associated with this context. protected override JsonSerializerOptions? GeneratedSerializerOptions { get; } Property Value JsonSerializerOptions PureMessagePacket Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<PureMessagePacket> PureMessagePacket { get; } Property Value JsonTypeInfo<PureMessagePacket> String Defines the source generated JSON serialization contract metadata for a given type. public JsonTypeInfo<string> String { get; } Property Value JsonTypeInfo<string> Methods GetTypeInfo(Type) Gets metadata for the specified type. public override JsonTypeInfo? GetTypeInfo(Type type) Parameters type Type The type to fetch metadata for. Returns JsonTypeInfo The metadata for the specified type, or null if the context has no metadata for the type."
  },
  "api/P2PNet.Distribution.html": {
    "href": "api/P2PNet.Distribution.html",
    "title": "Namespace P2PNet.Distribution | P2PNetDocs",
    "summary": "Namespace P2PNet.Distribution Classes CollectionSharePacketContext DataTransmissionPacketContext DisconnectPacketContext DistributionHandler Provides methods and properties to handle data distribution to trusted peer channels. DistributionProtocol The DistributionProtocol provides uniformity with data exchange, packet formatting, and other functions within the P2P network. This should be included as a static reference. EncryptionAndSecurityHandler GenericPeerContext GenericPeerListContext IPeerContext IPeerListContext IdentifierPacketContext NetworkTaskContext NetworkTaskHandler PGPKeyInfo PureMessagePacketContext Structs DistributionProtocol.MessageTags DistributionProtocol.PacketTypeRelay Enums DistributionProtocol.DataPayloadFormat DistributionProtocol.PacketType"
  },
  "api/P2PNet.Exceptions.InitialAuthorityLockedException.html": {
    "href": "api/P2PNet.Exceptions.InitialAuthorityLockedException.html",
    "title": "Class InitialAuthorityLockedException | P2PNetDocs",
    "summary": "Class InitialAuthorityLockedException Namespace P2PNet.Exceptions Assembly P2PNet.dll Represents an exception thrown when the initial bootstrap authority is locked in and another action conflicts with the initial locked in authority. public class InitialAuthorityLockedException : Exception, ISerializable Inheritance object Exception InitialAuthorityLockedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InitialAuthorityLockedException() public InitialAuthorityLockedException() InitialAuthorityLockedException(string) public InitialAuthorityLockedException(string message) Parameters message string InitialAuthorityLockedException(string, Exception) public InitialAuthorityLockedException(string message, Exception inner) Parameters message string inner Exception"
  },
  "api/P2PNet.Exceptions.TrustPolicyConflictException.html": {
    "href": "api/P2PNet.Exceptions.TrustPolicyConflictException.html",
    "title": "Class TrustPolicyConflictException | P2PNetDocs",
    "summary": "Class TrustPolicyConflictException Namespace P2PNet.Exceptions Assembly P2PNet.dll public class TrustPolicyConflictException : Exception, ISerializable Inheritance object Exception TrustPolicyConflictException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TrustPolicyConflictException() public TrustPolicyConflictException() TrustPolicyConflictException(string) public TrustPolicyConflictException(string message) Parameters message string TrustPolicyConflictException(string, Exception) public TrustPolicyConflictException(string message, Exception inner) Parameters message string inner Exception"
  },
  "api/P2PNet.Exceptions.html": {
    "href": "api/P2PNet.Exceptions.html",
    "title": "Namespace P2PNet.Exceptions | P2PNetDocs",
    "summary": "Namespace P2PNet.Exceptions Classes InitialAuthorityLockedException Represents an exception thrown when the initial bootstrap authority is locked in and another action conflicts with the initial locked in authority. TrustPolicyConflictException"
  },
  "api/P2PNet.NetworkPackets.CollectionSharePacket.html": {
    "href": "api/P2PNet.NetworkPackets.CollectionSharePacket.html",
    "title": "Class CollectionSharePacket | P2PNetDocs",
    "summary": "Class CollectionSharePacket Namespace P2PNet.NetworkPackets Assembly P2PNet.dll Standard packet used to relay a collection of peers on the network using peer-identifying information. public class CollectionSharePacket : INetworkPacket Inheritance object CollectionSharePacket Implements INetworkPacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CollectionSharePacket() public CollectionSharePacket() CollectionSharePacket(int, List<IPeer>) public CollectionSharePacket(int data, List<IPeer> peers) Parameters data int peers List<IPeer> Properties Data Optional data or information to assist in establishing network connection(s). public int Data { get; set; } Property Value int peers A collection of peer information. public List<IPeer> peers { get; set; } Property Value List<IPeer>"
  },
  "api/P2PNet.NetworkPackets.DataTransmissionPacket.html": {
    "href": "api/P2PNet.NetworkPackets.DataTransmissionPacket.html",
    "title": "Class DataTransmissionPacket | P2PNetDocs",
    "summary": "Class DataTransmissionPacket Namespace P2PNet.NetworkPackets Assembly P2PNet.dll Represents a data transmission packet used for transmitting data throughout the peer-to-peer network. public sealed class DataTransmissionPacket : INetworkPacket Inheritance object DataTransmissionPacket Implements INetworkPacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Remarks This packet can be used to transmit files, data, and NetworkTask objects throughout the network. Constructors DataTransmissionPacket() public DataTransmissionPacket() DataTransmissionPacket(byte[], DataPayloadFormat) Initializes a new instance of the DataTransmissionPacket class with specified data and data format. public DataTransmissionPacket(byte[] data, DistributionProtocol.DataPayloadFormat dataType) Parameters data byte[] The data payload within the packet. dataType DistributionProtocol.DataPayloadFormat Denotes the type of data contained within the data payload. Remarks Upon instantiating an instance of the DataTransmissionPacket class, the DataType parameter is used to wrap the raw data with corresponding tags so it can be parsed and more easily managed throughout its life cycle. Properties Data Gets or sets the data contained in the packet. public byte[] Data { get; set; } Property Value byte[] DataType Gets or sets the format of the data. Acceptable data formats include: File - represents an in-memory file Task - represents a NetworkTask MiscData - represents any other type of object or class public DistributionProtocol.DataPayloadFormat DataType { get; set; } Property Value DistributionProtocol.DataPayloadFormat Methods ToString() Returns a string representation of the data transmission packet. public override string ToString() Returns string A string representation of the data transmission packet."
  },
  "api/P2PNet.NetworkPackets.DisconnectPacket.html": {
    "href": "api/P2PNet.NetworkPackets.DisconnectPacket.html",
    "title": "Class DisconnectPacket | P2PNetDocs",
    "summary": "Class DisconnectPacket Namespace P2PNet.NetworkPackets Assembly P2PNet.dll Standard packet used to relay information about disconnecting peers. public sealed class DisconnectPacket : INetworkPacket Inheritance object DisconnectPacket Implements INetworkPacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DisconnectPacket() public DisconnectPacket() DisconnectPacket(string, int) Initializes a new instance of the DisconnectPacket class with the specified IP and port. Time-stamp is initialized to the current DateTime value. public DisconnectPacket(string ip, int port) Parameters ip string The IP address of the peer. port int The port of the peer. Properties Data Optional data to include pertaining to disconnection. public Dictionary<string, string> Data { get; set; } Property Value Dictionary<string, string> IP Peer's IP address. public string IP { get; set; } Property Value string Port Peer's port number. public int Port { get; set; } Property Value int Timestamp Disconnection time-stamp. public DateTime Timestamp { get; } Property Value DateTime"
  },
  "api/P2PNet.NetworkPackets.INetworkPacket.html": {
    "href": "api/P2PNet.NetworkPackets.INetworkPacket.html",
    "title": "Interface INetworkPacket | P2PNetDocs",
    "summary": "Interface INetworkPacket Namespace P2PNet.NetworkPackets Assembly P2PNet.dll public interface INetworkPacket"
  },
  "api/P2PNet.NetworkPackets.IdentifierPacket.html": {
    "href": "api/P2PNet.NetworkPackets.IdentifierPacket.html",
    "title": "Class IdentifierPacket | P2PNetDocs",
    "summary": "Class IdentifierPacket Namespace P2PNet.NetworkPackets Assembly P2PNet.dll Standard packet used to relay identifying information through out peer network. public sealed class IdentifierPacket : INetworkPacket Inheritance object IdentifierPacket Implements INetworkPacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors IdentifierPacket() [JsonConstructor] public IdentifierPacket() IdentifierPacket(string, int, IPAddress) public IdentifierPacket(string message, int data, IPAddress ip_) Parameters message string data int ip_ IPAddress Properties Data Relevant data to assist in establishing network connection. public int Data { get; set; } Property Value int IP IP address to broadcast. public string IP { get; set; } Property Value string Message Optional data or information to assist in establishing network connection. public string Message { get; set; } Property Value string"
  },
  "api/P2PNet.NetworkPackets.PureMessagePacket.html": {
    "href": "api/P2PNet.NetworkPackets.PureMessagePacket.html",
    "title": "Class PureMessagePacket | P2PNetDocs",
    "summary": "Class PureMessagePacket Namespace P2PNet.NetworkPackets Assembly P2PNet.dll Represents a simple human-readable message packet. public sealed class PureMessagePacket : INetworkPacket Inheritance object PureMessagePacket Implements INetworkPacket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PureMessagePacket() public PureMessagePacket() PureMessagePacket(string) Initializes a new instance of the PureMessagePacket class with a specified message. public PureMessagePacket(string message) Parameters message string The message to include in the packet. Properties Message Gets or sets the message contained in the packet. public string Message { get; set; } Property Value string"
  },
  "api/P2PNet.NetworkPackets.html": {
    "href": "api/P2PNet.NetworkPackets.html",
    "title": "Namespace P2PNet.NetworkPackets | P2PNetDocs",
    "summary": "Namespace P2PNet.NetworkPackets Classes CollectionSharePacket Standard packet used to relay a collection of peers on the network using peer-identifying information. DataTransmissionPacket Represents a data transmission packet used for transmitting data throughout the peer-to-peer network. DisconnectPacket Standard packet used to relay information about disconnecting peers. IdentifierPacket Standard packet used to relay identifying information through out peer network. PureMessagePacket Represents a simple human-readable message packet. Interfaces INetworkPacket"
  },
  "api/P2PNet.PeerNetwork.BootstrapTrustPolicy.html": {
    "href": "api/P2PNet.PeerNetwork.BootstrapTrustPolicy.html",
    "title": "Class PeerNetwork.BootstrapTrustPolicy | P2PNetDocs",
    "summary": "Class PeerNetwork.BootstrapTrustPolicy Namespace P2PNet Assembly P2PNet.dll Handles trust and permissions in regards to bootstrap connections. public static class PeerNetwork.BootstrapTrustPolicy Inheritance object PeerNetwork.BootstrapTrustPolicy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllowBootstrapAuthorityConnection Gets or sets whether bootstrap authority connections are allowed. When enabled, the client can connect to bootstrap servers able to issue command tasks that are signed with authority certificates. This signed command tasks will be executed by the client and are used to control the network. public static bool AllowBootstrapAuthorityConnection { get; set; } Property Value bool AllowBootstrapTrustlessConnection Gets or sets whether bootstrap trustless connections are allowed. When enabled, the client can connect to bootstrap servers able to serve a static endpoint for giving new peers the peer list. This can be disabled to enforce bootstrap authority. public static bool AllowBootstrapTrustlessConnection { get; set; } Property Value bool FirstSingleLockingAuthority If true, the first authority connection will be the only authority connection. No other authority connections will be allowed. Setting this value to true will also set MustBeAuthority and AllowBootstrapAuthorityConnection to true. public static bool FirstSingleLockingAuthority { get; set; } Property Value bool MustBeAuthority Gets or sets whether bootstrap servers must establish an authority connection. public static bool MustBeAuthority { get; set; } Property Value bool"
  },
  "api/P2PNet.PeerNetwork.BootstrapTrustPolicyType.html": {
    "href": "api/P2PNet.PeerNetwork.BootstrapTrustPolicyType.html",
    "title": "Enum PeerNetwork.BootstrapTrustPolicyType | P2PNetDocs",
    "summary": "Enum PeerNetwork.BootstrapTrustPolicyType Namespace P2PNet Assembly P2PNet.dll public enum PeerNetwork.BootstrapTrustPolicyType Fields Authority = 1 Trustless = 0"
  },
  "api/P2PNet.PeerNetwork.IncomingPeerTrustPolicy.IncomingPeerMode.html": {
    "href": "api/P2PNet.PeerNetwork.IncomingPeerTrustPolicy.IncomingPeerMode.html",
    "title": "Enum PeerNetwork.IncomingPeerTrustPolicy.IncomingPeerMode | P2PNetDocs",
    "summary": "Enum PeerNetwork.IncomingPeerTrustPolicy.IncomingPeerMode Namespace P2PNet Assembly P2PNet.dll Values for IncomingPeerPlacement QueueBasedThe inbound peer will be directed to the inbound peer queue. EventBasedAn event is triggered and the peer is passed to the event args. QueueAndEventBasedThe peer is directed to the inbound peer queue, and an event is triggered where the peer is passed to the event args. public enum PeerNetwork.IncomingPeerTrustPolicy.IncomingPeerMode Fields EventBased = 1 QueueAndEventBased = 2 QueueBased = 0"
  },
  "api/P2PNet.PeerNetwork.IncomingPeerTrustPolicy.html": {
    "href": "api/P2PNet.PeerNetwork.IncomingPeerTrustPolicy.html",
    "title": "Class PeerNetwork.IncomingPeerTrustPolicy | P2PNetDocs",
    "summary": "Class PeerNetwork.IncomingPeerTrustPolicy Namespace P2PNet Assembly P2PNet.dll Handles trust and permissions in regards to incoming peer connections. public static class PeerNetwork.IncomingPeerTrustPolicy Inheritance object PeerNetwork.IncomingPeerTrustPolicy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllowDefaultCommunication Gets or sets whether incoming peer connections will be trusted to establish initial communication by default. public static bool AllowDefaultCommunication { get; set; } Property Value bool Remarks This determines communicability of PureMessagePacket and DisconnectPacket through the PeerChannel. AllowEnhancedPacketExchange Gets or sets whether incoming peer connections will be trusted to exchange all other packet types, like data transmission packets, before being trusted peers. public static bool AllowEnhancedPacketExchange { get; set; } Property Value bool BlockedIPs Gets or sets the list of blocked IP addresses. public static List<IPAddress> BlockedIPs { get; set; } Property Value List<IPAddress> Remarks This will prevent peers with the specified IP addresses from connecting. BlockedIdentifiers Gets or sets the list of blocked peer identifiers. public static List<string> BlockedIdentifiers { get; set; } Property Value List<string> Remarks This is useful in authority mode or when peer identifiers are managed to be unique to machine/IP address. DefaultTrustProtocol public static Action<PeerChannel> DefaultTrustProtocol { get; set; } Property Value Action<PeerChannel> IncomingPeerPlacement Gets or sets the logic for handling inbound peers. QueueBasedThe inbound peer will be directed to the inbound peer queue. EventBasedAn event is triggered and the peer is passed to the event args. QueueAndEventBasedThe peer is directed to the inbound peer queue, and an event is triggered where the peer is passed to the event args. public static PeerNetwork.IncomingPeerTrustPolicy.IncomingPeerMode IncomingPeerPlacement { get; set; } Property Value PeerNetwork.IncomingPeerTrustPolicy.IncomingPeerMode RunDefaultTrustProtocol Gets or sets whether the default trust protocol will be run when a new peer channel is opened. public static bool RunDefaultTrustProtocol { get; set; } Property Value bool Remarks The peer channel will invoke DefaultTrustProtocol Action delegate and pass a reference to itself."
  },
  "api/P2PNet.PeerNetwork.LANIdentifierPreference.html": {
    "href": "api/P2PNet.PeerNetwork.LANIdentifierPreference.html",
    "title": "Enum PeerNetwork.LANIdentifierPreference | P2PNetDocs",
    "summary": "Enum PeerNetwork.LANIdentifierPreference Namespace P2PNet Assembly P2PNet.dll public enum PeerNetwork.LANIdentifierPreference Fields IP = 0 MAC = 1 PeerID = 2"
  },
  "api/P2PNet.PeerNetwork.LocalAreaNetworkManagement.html": {
    "href": "api/P2PNet.PeerNetwork.LocalAreaNetworkManagement.html",
    "title": "Class PeerNetwork.LocalAreaNetworkManagement | P2PNetDocs",
    "summary": "Class PeerNetwork.LocalAreaNetworkManagement Namespace P2PNet Assembly P2PNet.dll public static class PeerNetwork.LocalAreaNetworkManagement Inheritance object PeerNetwork.LocalAreaNetworkManagement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllowSameIPConnections public static bool AllowSameIPConnections { get; set; } Property Value bool LANIdentifierPreference public static PeerNetwork.LANIdentifierPreference LANIdentifierPreference { get; set; } Property Value PeerNetwork.LANIdentifierPreference"
  },
  "api/P2PNet.PeerNetwork.NewKnownPeerEventHandler.html": {
    "href": "api/P2PNet.PeerNetwork.NewKnownPeerEventHandler.html",
    "title": "Delegate PeerNetwork.NewKnownPeerEventHandler | P2PNetDocs",
    "summary": "Delegate PeerNetwork.NewKnownPeerEventHandler Namespace P2PNet Assembly P2PNet.dll public delegate void PeerNetwork.NewKnownPeerEventHandler(object sender, PeerNetwork.NewPeerEventArgs e) Parameters sender object e PeerNetwork.NewPeerEventArgs"
  },
  "api/P2PNet.PeerNetwork.NewPeerEventArgs.html": {
    "href": "api/P2PNet.PeerNetwork.NewPeerEventArgs.html",
    "title": "Class PeerNetwork.NewPeerEventArgs | P2PNetDocs",
    "summary": "Class PeerNetwork.NewPeerEventArgs Namespace P2PNet Assembly P2PNet.dll public class PeerNetwork.NewPeerEventArgs : EventArgs Inheritance object EventArgs PeerNetwork.NewPeerEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NewPeerEventArgs(PeerChannel) public NewPeerEventArgs(PeerChannel PeerChannel) Parameters PeerChannel PeerChannel Properties peerChannel public PeerChannel peerChannel { get; } Property Value PeerChannel"
  },
  "api/P2PNet.PeerNetwork.TrustPolicies.BootstrapTrustPolicy.html": {
    "href": "api/P2PNet.PeerNetwork.TrustPolicies.BootstrapTrustPolicy.html",
    "title": "Class PeerNetwork.TrustPolicies.BootstrapTrustPolicy | P2PNetDocs",
    "summary": "Class PeerNetwork.TrustPolicies.BootstrapTrustPolicy Namespace P2PNet Assembly P2PNet.dll Handles trust and permissions in regards to bootstrap connections. public static class PeerNetwork.TrustPolicies.BootstrapTrustPolicy Inheritance object PeerNetwork.TrustPolicies.BootstrapTrustPolicy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllowBootstrapAuthorityConnection Gets or sets whether bootstrap authority connections are allowed. When enabled, the client can connect to bootstrap servers able to issue command tasks that are signed with authority certificates. This signed command tasks will be executed by the client and are used to control the network. public static bool AllowBootstrapAuthorityConnection { get; set; } Property Value bool AllowBootstrapTrustlessConnection Gets or sets whether bootstrap trustless connections are allowed. When enabled, the client can connect to bootstrap servers able to serve a static endpoint for giving new peers the peer list. This can be disabled to enforce bootstrap authority. public static bool AllowBootstrapTrustlessConnection { get; set; } Property Value bool Remarks Trustless boostrap connection cannot relay commands or information of any sorts, they may only serve to relay identifying peer information. FirstSingleLockingAuthority If true, the first authority connection will be the only authority connection. No other authority connections will be allowed. Setting this value to true will also set MustBeAuthority and AllowBootstrapAuthorityConnection to true. public static bool FirstSingleLockingAuthority { get; set; } Property Value bool FirstSingleLockingAuthoritySet Gets whether the first authority connection has been set or not. public static bool FirstSingleLockingAuthoritySet { get; } Property Value bool MustBeAuthority Gets or sets whether bootstrap servers must establish an authority connection. public static bool MustBeAuthority { get; set; } Property Value bool Remarks Setting this to true will automatically set AllowBootstrapTrustlessConnection to false. Methods SetFirstLockingAuthority(BootstrapChannel) Sets the first authority connection to be established via the bootstrap connection. public static void SetFirstLockingAuthority(BootstrapChannel authority) Parameters authority BootstrapChannel The bootstrap channel that will take first single locking authority."
  },
  "api/P2PNet.PeerNetwork.TrustPolicies.BootstrapTrustPolicyType.html": {
    "href": "api/P2PNet.PeerNetwork.TrustPolicies.BootstrapTrustPolicyType.html",
    "title": "Enum PeerNetwork.TrustPolicies.BootstrapTrustPolicyType | P2PNetDocs",
    "summary": "Enum PeerNetwork.TrustPolicies.BootstrapTrustPolicyType Namespace P2PNet Assembly P2PNet.dll public enum PeerNetwork.TrustPolicies.BootstrapTrustPolicyType Fields Authority = 1 Trustless = 0"
  },
  "api/P2PNet.PeerNetwork.TrustPolicies.IncomingPeerTrustPolicy.IncomingPeerMode.html": {
    "href": "api/P2PNet.PeerNetwork.TrustPolicies.IncomingPeerTrustPolicy.IncomingPeerMode.html",
    "title": "Enum PeerNetwork.TrustPolicies.IncomingPeerTrustPolicy.IncomingPeerMode | P2PNetDocs",
    "summary": "Enum PeerNetwork.TrustPolicies.IncomingPeerTrustPolicy.IncomingPeerMode Namespace P2PNet Assembly P2PNet.dll Values for IncomingPeerPlacement QueueBasedThe inbound peer will be directed to the inbound peer queue. EventBasedAn event is triggered and the peer is passed to the event args. QueueAndEventBasedThe peer is directed to the inbound peer queue, and an event is triggered where the peer is passed to the event args. public enum PeerNetwork.TrustPolicies.IncomingPeerTrustPolicy.IncomingPeerMode Fields EventBased = 1 QueueAndEventBased = 2 QueueBased = 0"
  },
  "api/P2PNet.PeerNetwork.TrustPolicies.IncomingPeerTrustPolicy.html": {
    "href": "api/P2PNet.PeerNetwork.TrustPolicies.IncomingPeerTrustPolicy.html",
    "title": "Class PeerNetwork.TrustPolicies.IncomingPeerTrustPolicy | P2PNetDocs",
    "summary": "Class PeerNetwork.TrustPolicies.IncomingPeerTrustPolicy Namespace P2PNet Assembly P2PNet.dll Handles trust and permissions in regards to incoming peer connections. public static class PeerNetwork.TrustPolicies.IncomingPeerTrustPolicy Inheritance object PeerNetwork.TrustPolicies.IncomingPeerTrustPolicy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllowDefaultCommunication Gets or sets whether incoming peer connections will be trusted to establish initial communication by default. public static bool AllowDefaultCommunication { get; set; } Property Value bool Remarks This determines communicability of PureMessagePacket and DisconnectPacket through the PeerChannel. AllowEnhancedPacketExchange Gets or sets whether incoming peer connections will be trusted to exchange all other packet types, like data transmission packets, before being trusted peers. public static bool AllowEnhancedPacketExchange { get; set; } Property Value bool BlockedIPs Gets or sets the list of blocked IP addresses. public static List<IPAddress> BlockedIPs { get; set; } Property Value List<IPAddress> Remarks This will prevent peers with the specified IP addresses from connecting. BlockedIdentifiers Gets or sets the list of blocked peer identifiers. public static List<string> BlockedIdentifiers { get; set; } Property Value List<string> Remarks This is useful in authority mode or when peer identifiers are managed to be unique to machine/IP address. DefaultTrustProtocol public static Action<PeerChannel> DefaultTrustProtocol { get; set; } Property Value Action<PeerChannel> IncomingPeerPlacement Gets or sets the logic for handling inbound peers. QueueBasedThe inbound peer will be directed to the inbound peer queue. EventBasedAn event is triggered and the peer is passed to the event args. QueueAndEventBasedThe peer is directed to the inbound peer queue, and an event is triggered where the peer is passed to the event args. public static PeerNetwork.TrustPolicies.IncomingPeerTrustPolicy.IncomingPeerMode IncomingPeerPlacement { get; set; } Property Value PeerNetwork.TrustPolicies.IncomingPeerTrustPolicy.IncomingPeerMode RunDefaultTrustProtocol Gets or sets whether the default trust protocol will be run when a new peer channel is opened. public static bool RunDefaultTrustProtocol { get; set; } Property Value bool Remarks The peer channel will invoke DefaultTrustProtocol Action delegate and pass a reference to itself."
  },
  "api/P2PNet.PeerNetwork.TrustPolicies.LocalIdentifierSetPolicyTypes.html": {
    "href": "api/P2PNet.PeerNetwork.TrustPolicies.LocalIdentifierSetPolicyTypes.html",
    "title": "Enum PeerNetwork.TrustPolicies.LocalIdentifierSetPolicyTypes | P2PNetDocs",
    "summary": "Enum PeerNetwork.TrustPolicies.LocalIdentifierSetPolicyTypes Namespace P2PNet Assembly P2PNet.dll Specifies the policy for initializing and managing the identifier of a peer member in the P2P network. This policy determines whether the identifier can be set locally, remotely, or both, and whether it can be changed after initial assignment. public enum PeerNetwork.TrustPolicies.LocalIdentifierSetPolicyTypes Fields Local = 1 The identifier can be set and changed locally by the client. This allows the client to manage its own identifier through out application lifecycle, but does not permit remote commands to alter it. LocalAndRemote = 2 The identifier can be set and changed both locally and remotely. The client can receive a NetworkTask from a trusted source (e.g., a bootstrap server in authority mode) with instructions to change the identifier. This provides flexibility for both local and remote management of the identifier. RemoteOnly = 3 The identifier can only be set based on a NetworkTask from a remote authority source, such as a bootstrap server. This ensures that the identifier is controlled by a trusted external entity and cannot be changed locally by the client. StrictLocalOnly = 0 The identifier is set only upon initialization and cannot be changed thereafter. This ensures that the identifier remains consistent and is not influenced by any external commands or local changes. Note that this will lock in the policy and prevent any changes to the identifier after initial assignment. StrictRemoteOnly = 4 The identifier is strictly initialized and managed by a remote authority source and cannot be changed locally. This provides the highest level of control by ensuring that the identifier is only influenced by trusted remote commands. Note that this will lock in the policy and prevent any changes to the identifier after initial assignment."
  },
  "api/P2PNet.PeerNetwork.TrustPolicies.PeerNetworkTrustPolicy.html": {
    "href": "api/P2PNet.PeerNetwork.TrustPolicies.PeerNetworkTrustPolicy.html",
    "title": "Class PeerNetwork.TrustPolicies.PeerNetworkTrustPolicy | P2PNetDocs",
    "summary": "Class PeerNetwork.TrustPolicies.PeerNetworkTrustPolicy Namespace P2PNet Assembly P2PNet.dll public static class PeerNetwork.TrustPolicies.PeerNetworkTrustPolicy Inheritance object PeerNetwork.TrustPolicies.PeerNetworkTrustPolicy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties LocalIdentifierSetPolicy Gets or sets the policy for initializing and managing the identifier of a peer member in the P2P network. This policy determines whether the identifier can be set locally, remotely, or both, and whether it can be changed after initial assignment. public static PeerNetwork.TrustPolicies.LocalIdentifierSetPolicyTypes LocalIdentifierSetPolicy { get; set; } Property Value PeerNetwork.TrustPolicies.LocalIdentifierSetPolicyTypes Exceptions UnauthorizedAccessException Thrown if an attempt is made to change the policy to or from StrictLocalOnly or StrictRemoteOnly after the identifier has already been set."
  },
  "api/P2PNet.PeerNetwork.TrustPolicies.html": {
    "href": "api/P2PNet.PeerNetwork.TrustPolicies.html",
    "title": "Class PeerNetwork.TrustPolicies | P2PNetDocs",
    "summary": "Class PeerNetwork.TrustPolicies Namespace P2PNet Assembly P2PNet.dll public static class PeerNetwork.TrustPolicies Inheritance object PeerNetwork.TrustPolicies Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/P2PNet.PeerNetwork.html": {
    "href": "api/P2PNet.PeerNetwork.html",
    "title": "Class PeerNetwork | P2PNetDocs",
    "summary": "Class PeerNetwork Namespace P2PNet Assembly P2PNet.dll public static class PeerNetwork Inheritance object PeerNetwork Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ActivePeerChannels All active PeerChannel connections are stored here. public static volatile List<PeerChannel> ActivePeerChannels Field Value List<PeerChannel> InboundConnectingPeers Queue of inbound connecting peers that have not been assigned a peer channel. public static InboundConnectingPeersQueue InboundConnectingPeers Field Value InboundConnectingPeersQueue Remarks This will only become populated if the IncomingPeerPlacement value includes queue-based placement. This allows for additional verification and handling of incoming peers before they are assigned a peer channel. For idle action, consider using EventBased and ignoring the event to prevent excessive memory usage. MAC Gets the system MAC address. public static PhysicalAddress MAC Field Value PhysicalAddress PublicIPV6Address Gets the public IPv6 IP address. public static IPAddress PublicIPV6Address Field Value IPAddress Properties AcceptInboundPeers Gets or sets whether a designated TCP port will be actively listening for and accepting inbound TCP peer connections. Setting this value will automatically start or stop acceptance of inbound peers. The default is true, but you may want to toggle this for server instances that serve different network purposes. public static bool AcceptInboundPeers { get; set; } Property Value bool AutoThrottleOnConnect Indicates whether to automatically throttle outbound broadcast rate when a new peer is discovered. public static bool AutoThrottleOnConnect { get; set; } Property Value bool BroadcasterPort Gets or sets the broadcaster port designated for outbound LAN discovery. public static int BroadcasterPort { get; set; } Property Value int DesignatedPorts Gets or sets the list of designated ports for broadcast and discovery. public static List<int> DesignatedPorts { get; set; } Property Value List<int> Identifier Gets or sets the identifier for the peer member in the P2P network. The ability to set or change the identifier is governed by the LocalIdentifierSetPolicy. public static string Identifier { get; set; } Property Value string Exceptions UnauthorizedAccessException Thrown if an attempt is made to change the identifier when the policy is set to StrictLocalOnly or StrictRemoteOnly and the identifier has already been set. InboundPeerCount Gets the number of inbound peers that have been enqueued but not yet processed. public static int InboundPeerCount { get; } Property Value int KnownPeers Gets or sets the list of known peers. public static List<IPeer> KnownPeers { get; set; } Property Value List<IPeer> Remarks KnownPeers do not necessarily have established trust to exchange extensive data and information, but do have an open PeerChannel in the ActivePeerChannels. This is mostly to store and manage known peers for future reference and potential connection. ListeningPort Gets the listening port for inbound TCP peer connections. public static int ListeningPort { get; } Property Value int LocalIPV4Address Gets the local IPv4 IP address. public static IPAddress LocalIPV4Address { get; } Property Value IPAddress P2PNetworkRoutines public static NetworkRoutines<string, IRoutine> P2PNetworkRoutines { get; set; } Property Value NetworkRoutines<string, IRoutine> PublicIPV4Address Gets the public IPv4 IP address. public static IPAddress PublicIPV4Address { get; } Property Value IPAddress TrustedPeerChannels Gets the list of trusted peer channels within the ActivePeerChannels public static List<PeerChannel> TrustedPeerChannels { get; } Property Value List<PeerChannel> Methods AddBootstrapChannel(BootstrapChannel) Adds the provided BootstrapChannel instance to the active bootstrap channels collection. public static void AddBootstrapChannel(BootstrapChannel bootstrapChannel) Parameters bootstrapChannel BootstrapChannel An instance of BootstrapChannel to be added. AddBootstrapChannel(BootstrapChannelConnectionOptions) Creates a new BootstrapChannel from the specified connection options and adds it to the active bootstrap channels collection. public static void AddBootstrapChannel(BootstrapChannelConnectionOptions bootstrapChannel) Parameters bootstrapChannel BootstrapChannelConnectionOptions An instance of BootstrapChannelConnectionOptions containing the connection settings. The endpoint is mandatory while the authority mode and bootstrap peer values are optional. AddBootstrapChannel(string, BootstrapTrustPolicyType) Creates a new BootstrapChannel using the specified endpoint address and trust policy, then adds it to the active bootstrap channels collection. public static void AddBootstrapChannel(string address, PeerNetwork.TrustPolicies.BootstrapTrustPolicyType trustPolicy) Parameters address string The endpoint URL or address of the bootstrap server. trustPolicy PeerNetwork.TrustPolicies.BootstrapTrustPolicyType A value of BootstrapTrustPolicyType that specifies whether the channel should be created in authority or trustless mode. AddPeer(IPeer, TcpClient) Adds a peer to the KnownPeers list and establishes a connection if one is not provided. A new peer channel will be automatically added to ActivePeerChannels with standard non-elevated permissions. public static Task AddPeer(IPeer peer, TcpClient client = null) Parameters peer IPeer The peer to add. client TcpClient The TCP client associated with the peer. Default is null. Returns Task A task that represents the asynchronous operation. BeginAcceptingInboundPeers() Begins accepting inbound peers connections. public static void BeginAcceptingInboundPeers() DequeueInboundPeer() Gets the first peer from inbound peer queue. public static GenericPeer DequeueInboundPeer() Returns GenericPeer ElevatePeerPermission(PeerChannel) Elevates a peer's permissions and adjusts broadcasting if necessary. public static Task<bool> ElevatePeerPermission(PeerChannel channel) Parameters channel PeerChannel The peer channel to elevate. Returns Task<bool> A task that represents the asynchronous operation. The task result contains a boolean indicating success or failure. LoadLocalAddresses() Scans all network interface devices and collects essential information needed for peer network. public static void LoadLocalAddresses() ProcessPeerList(CollectionSharePacket) Processes and adds peers from a collection share packet to the known peers list. public static void ProcessPeerList(CollectionSharePacket packet) Parameters packet CollectionSharePacket The collection share packet containing the list of peers. RemovePeer(PeerChannel) Terminates a peer connection and removes it from KnownPeers and ActivePeerChannels. public static Task<bool> RemovePeer(PeerChannel channel) Parameters channel PeerChannel The peer channel to remove. Returns Task<bool> A task that represents the asynchronous operation. The task result contains a boolean indicating success or failure. StartBootstrapConnections() Begin loading bootstrap connections. public static void StartBootstrapConnections() StartBroadcastingLAN() Begin LAN broadcast and discovery. public static void StartBroadcastingLAN() StartBroadcastingLAN(bool) Begin LAN broadcast and discovery. public static void StartBroadcastingLAN(bool initialRandomization = false) Parameters initialRandomization bool By default, the BroadcasterPort is randomized from available ports. Use this to override or manually set whether random selection occurs. Useful in scenarios when other logic determines the broadcaster port. StopAcceptingInboundPeers() Stops accepting inbound peer connections. public static void StopAcceptingInboundPeers() StopBroadcastingLAN() Stops all LAN broadcast. public static void StopBroadcastingLAN() ThrottleBroadcastingDown() Throttles the broadcasting down. public static void ThrottleBroadcastingDown() Remarks This greatly reduces the speed at which packets are sent out. This may be useful if you want to lessen the computational load while handling newly found connections. Events IncomingPeerConnectionAttempt Occurs when a new incoming peer connection attempt is detected. Subscribers can use this event to handle new connections and pass incoming connections through your verification pipeline and/or AddPeer(IPeer, TcpClient). public static event EventHandler<IncomingPeerEventArgs> IncomingPeerConnectionAttempt Event Type EventHandler<IncomingPeerEventArgs> PeerAdded Occurs when a new peer is added and passes the received data from the subsequent PeerChannel in an event. Subscribers can use this event to handle all new peers and their peer channels, regardless of point of origin. public static event EventHandler<PeerNetwork.NewPeerEventArgs> PeerAdded Event Type EventHandler<PeerNetwork.NewPeerEventArgs> Examples // Event is raised when a new known peer is discovered, regardless of point of origin private static void HandleNewKnownPeer(object sender, PeerNetwork.NewPeerEventArgs e) { // The peer channel's DataReceived event subscribed to HandleIncomingData function e.peerChannel.DataReceived += HandleIncomingData; } private static void HandleIncomingData(object? sender, PeerChannelBase.DataReceivedEventArgs e) { Console.WriteLine(e.Data); // incoming information is printed to console }"
  },
  "api/P2PNet.Peers.GenericPeer.html": {
    "href": "api/P2PNet.Peers.GenericPeer.html",
    "title": "Class GenericPeer | P2PNetDocs",
    "summary": "Class GenericPeer Namespace P2PNet.Peers Assembly P2PNet.dll Represents a default peer implementation using IPeer. public class GenericPeer : IPeer Inheritance object GenericPeer Implements IPeer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GenericPeer() public GenericPeer() GenericPeer(IPAddress, int) public GenericPeer(IPAddress ip, int port) Parameters ip IPAddress port int Properties Address Gets or sets the address for the peer. public string Address { get; set; } Property Value string Client Gets or sets the TCP client associated with the peer. [JsonIgnore] public TcpClient Client { get; set; } Property Value TcpClient IP Gets or sets the IP address of the peer. [JsonIgnore] public IPAddress IP { get; set; } Property Value IPAddress Identifier Gets or sets the unique identifier for the peer. public string Identifier { get; set; } Property Value string Port Gets or sets the port of the peer. public int Port { get; set; } Property Value int Stream Gets or sets the network stream associated with the peer. [JsonIgnore] public NetworkStream Stream { get; set; } Property Value NetworkStream"
  },
  "api/P2PNet.Peers.IPeer.html": {
    "href": "api/P2PNet.Peers.IPeer.html",
    "title": "Interface IPeer | P2PNetDocs",
    "summary": "Interface IPeer Namespace P2PNet.Peers Assembly P2PNet.dll Represents a peer with an IP address, port, TCP client, network stream, and identifier. [JsonPolymorphic(TypeDiscriminatorPropertyName = \"$type\")] [JsonDerivedType(typeof(GenericPeer), \"GenericPeer\")] public interface IPeer Properties Address string Address { get; set; } Property Value string Client Gets or sets the TCP client associated with the peer. [JsonIgnore] TcpClient Client { get; set; } Property Value TcpClient IP Gets or sets the IP address of the peer. [JsonIgnore] IPAddress IP { get; set; } Property Value IPAddress Id string Id { get; } Property Value string Identifier Gets or sets an identifier for the peer. This can optionally be used to store complementary IDs for whitelisting and blacklisting peers in your network (ie MAC address or other unique identifiers). string Identifier { get; set; } Property Value string Port Gets or sets the port of the peer. int Port { get; set; } Property Value int Stream Gets or sets the network stream associated with the peer. [JsonIgnore] NetworkStream Stream { get; set; } Property Value NetworkStream"
  },
  "api/P2PNet.Peers.InboundConnectingPeersQueue.html": {
    "href": "api/P2PNet.Peers.InboundConnectingPeersQueue.html",
    "title": "Class InboundConnectingPeersQueue | P2PNetDocs",
    "summary": "Class InboundConnectingPeersQueue Namespace P2PNet.Peers Assembly P2PNet.dll public class InboundConnectingPeersQueue Inheritance object InboundConnectingPeersQueue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count public int Count { get; } Property Value int Methods Dequeue() public GenericPeer Dequeue() Returns GenericPeer Enqueue(GenericPeer) public void Enqueue(GenericPeer peer) Parameters peer GenericPeer OnIncomingPeerConnectionAttempt(GenericPeer) protected virtual void OnIncomingPeerConnectionAttempt(GenericPeer peer) Parameters peer GenericPeer PeerIsQueued(IPAddress, string) public bool PeerIsQueued(IPAddress IPAddress, string Identifier = null) Parameters IPAddress IPAddress Identifier string Returns bool PeerIsQueued(string, string) public bool PeerIsQueued(string IPAddress, string Identifier = null) Parameters IPAddress string Identifier string Returns bool Events IncomingPeerConnectionAttempt public event EventHandler<IncomingPeerEventArgs> IncomingPeerConnectionAttempt Event Type EventHandler<IncomingPeerEventArgs>"
  },
  "api/P2PNet.Peers.IncomingPeerEventArgs.html": {
    "href": "api/P2PNet.Peers.IncomingPeerEventArgs.html",
    "title": "Class IncomingPeerEventArgs | P2PNetDocs",
    "summary": "Class IncomingPeerEventArgs Namespace P2PNet.Peers Assembly P2PNet.dll public class IncomingPeerEventArgs : EventArgs Inheritance object EventArgs IncomingPeerEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IncomingPeerEventArgs(GenericPeer) public IncomingPeerEventArgs(GenericPeer peer) Parameters peer GenericPeer Properties Peer public GenericPeer Peer { get; } Property Value GenericPeer"
  },
  "api/P2PNet.Peers.PeerChannel.html": {
    "href": "api/P2PNet.Peers.PeerChannel.html",
    "title": "Class PeerChannel | P2PNetDocs",
    "summary": "Class PeerChannel Namespace P2PNet.Peers Assembly P2PNet.dll Represents a communication channel with a peer in the P2P network. public class PeerChannel : PeerChannelBase Inheritance object PeerChannelBase PeerChannel Inherited Members PeerChannelBase.IncomingDataQueue PeerChannelBase.OutgoingDataQueue PeerChannelBase.packetQueue PeerChannelBase.CustomData PeerChannelBase.AddProperties(string, Type) PeerChannelBase.TryGetProperty(string) PeerChannelBase.LoadOutgoingData(string) PeerChannelBase.LoadOutgoingData(DataTransmissionPacket) PeerChannelBase.LoadOutgoingData(PureMessagePacket) PeerChannelBase.LoadOutgoingData(CollectionSharePacket) PeerChannelBase.LoadOutgoingData(DisconnectPacket) PeerChannelBase.DataReceived PeerChannelBase.OnDataReceived(string) PeerChannelBase._isTrustedPeer PeerChannelBase.IsTrustedPeer PeerChannelBase.TerminateChannel() PeerChannelBase.TerminateCurrentSender() PeerChannelBase.TerminateCurrentReceiver() PeerChannelBase.TerminatePacketHandler() PeerChannelBase.TrustPeer() PeerChannelBase.UntrustPeer() PeerChannelBase.StartPacketHandling() PeerChannelBase.PacketHandler(CancellationToken) PeerChannelBase.HandleIdentityPacket(string) PeerChannelBase.HandleDisconnectPacket(string) PeerChannelBase.HandlePeerGroupPacket(string) PeerChannelBase.HandleDataTransmissionPacket(string) PeerChannelBase.HandlePureMessagePacket(string) PeerChannelBase.ExtractWholeMessage(string) PeerChannelBase.IsValidMessageFormat(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PeerChannel(IPeer) Initializes a new instance of the PeerChannel class with the specified peer. public PeerChannel(IPeer peer_) Parameters peer_ IPeer The peer to associate with this channel. Properties LastIncomingDataReceived Gets the DateTime value of when the last piece of data or information was received from this peer. public DateTime LastIncomingDataReceived { get; } Property Value DateTime peer Gets or sets the peer associated with this channel. public IPeer peer { get; set; } Property Value IPeer Methods ClosePeerChannel() Closes the communication channel with the peer and terminates all associated tasks. public void ClosePeerChannel() OpenPeerChannel() Opens the communication channel with the peer and starts handling incoming and outgoing data. public void OpenPeerChannel() ReadIncoming(CancellationToken) The default task for reading incoming network stream data. public void ReadIncoming(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The cancellation token provided to the read incoming task. SendOutgoing(CancellationToken) The default task for sending outgoing data and information to the network stream. protected void SendOutgoing(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The cancellation token provided to the send outgoing task."
  },
  "api/P2PNet.Peers.PeerChannelBase.DataReceivedEventArgs.html": {
    "href": "api/P2PNet.Peers.PeerChannelBase.DataReceivedEventArgs.html",
    "title": "Class PeerChannelBase.DataReceivedEventArgs | P2PNetDocs",
    "summary": "Class PeerChannelBase.DataReceivedEventArgs Namespace P2PNet.Peers Assembly P2PNet.dll public class PeerChannelBase.DataReceivedEventArgs : EventArgs Inheritance object EventArgs PeerChannelBase.DataReceivedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DataReceivedEventArgs(string) public DataReceivedEventArgs(string data) Parameters data string Properties Data public string Data { get; } Property Value string"
  },
  "api/P2PNet.Peers.PeerChannelBase.DataReceivedEventHandler.html": {
    "href": "api/P2PNet.Peers.PeerChannelBase.DataReceivedEventHandler.html",
    "title": "Delegate PeerChannelBase.DataReceivedEventHandler | P2PNetDocs",
    "summary": "Delegate PeerChannelBase.DataReceivedEventHandler Namespace P2PNet.Peers Assembly P2PNet.dll public delegate void PeerChannelBase.DataReceivedEventHandler(object sender, PeerChannelBase.DataReceivedEventArgs e) Parameters sender object e PeerChannelBase.DataReceivedEventArgs"
  },
  "api/P2PNet.Peers.PeerChannelBase.html": {
    "href": "api/P2PNet.Peers.PeerChannelBase.html",
    "title": "Class PeerChannelBase | P2PNetDocs",
    "summary": "Class PeerChannelBase Namespace P2PNet.Peers Assembly P2PNet.dll public abstract class PeerChannelBase Inheritance object PeerChannelBase Derived PeerChannel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields CustomData protected Dictionary<string, Type> CustomData Field Value Dictionary<string, Type> IncomingDataQueue protected ConcurrentQueue<string> IncomingDataQueue Field Value ConcurrentQueue<string> OutgoingDataQueue protected ConcurrentQueue<string> OutgoingDataQueue Field Value ConcurrentQueue<string> packetQueue protected ConcurrentQueue<DistributionProtocol.PacketTypeRelay> packetQueue Field Value ConcurrentQueue<DistributionProtocol.PacketTypeRelay> Properties IsTrustedPeer public bool IsTrustedPeer { get; } Property Value bool _isTrustedPeer protected bool _isTrustedPeer { get; set; } Property Value bool Methods AddProperties(string, Type) Adds custom properties or data to the peer channel. This is to help with custom needs associated with the peer channel. public void AddProperties(string key, Type type) Parameters key string type Type ExtractWholeMessage(string) protected DistributionProtocol.PacketTypeRelay ExtractWholeMessage(string receivedData) Parameters receivedData string Returns DistributionProtocol.PacketTypeRelay HandleDataTransmissionPacket(string) protected virtual void HandleDataTransmissionPacket(string data) Parameters data string HandleDisconnectPacket(string) protected virtual void HandleDisconnectPacket(string data) Parameters data string HandleIdentityPacket(string) protected virtual void HandleIdentityPacket(string data) Parameters data string HandlePeerGroupPacket(string) protected virtual void HandlePeerGroupPacket(string data) Parameters data string HandlePureMessagePacket(string) protected virtual void HandlePureMessagePacket(string data) Parameters data string IsValidMessageFormat(string) protected bool IsValidMessageFormat(string inputString) Parameters inputString string Returns bool LoadOutgoingData(CollectionSharePacket) public virtual void LoadOutgoingData(CollectionSharePacket peerColPacket) Parameters peerColPacket CollectionSharePacket LoadOutgoingData(DataTransmissionPacket) public virtual void LoadOutgoingData(DataTransmissionPacket dataTransmissionPacket) Parameters dataTransmissionPacket DataTransmissionPacket LoadOutgoingData(DisconnectPacket) public virtual void LoadOutgoingData(DisconnectPacket disconnectPacket) Parameters disconnectPacket DisconnectPacket LoadOutgoingData(PureMessagePacket) public virtual void LoadOutgoingData(PureMessagePacket pureMessagePacket) Parameters pureMessagePacket PureMessagePacket LoadOutgoingData(string) Add the outgoing information to the broadcast queue. public virtual void LoadOutgoingData(string outgoing) Parameters outgoing string The information to be queued for broadcast. OnDataReceived(string) protected virtual void OnDataReceived(string data) Parameters data string PacketHandler(CancellationToken) protected Task PacketHandler(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns Task StartPacketHandling() protected void StartPacketHandling() TerminateChannel() protected virtual void TerminateChannel() TerminateCurrentReceiver() Terminates the receiver task. public virtual void TerminateCurrentReceiver() Remarks Peer channel will cease processing inbound data packets. TerminateCurrentSender() Terminates the sender task. public virtual void TerminateCurrentSender() Remarks Peer channel will cease broadcasting outbound data packets. TerminatePacketHandler() Terminates the packet handler task. public virtual void TerminatePacketHandler() TrustPeer() Promote trust level of peer. public virtual void TrustPeer() TryGetProperty(string) Attempts to retrieve a custom property or data from the peer channel. public Type TryGetProperty(string key) Parameters key string Returns Type The target value stored in the peer channel. UntrustPeer() Demote trust level of peer. public virtual void UntrustPeer() Events DataReceived Occurs when a peer channel receives incoming data or information. Subscribers can use this event to handle and process incoming data and information. public event EventHandler<PeerChannelBase.DataReceivedEventArgs> DataReceived Event Type EventHandler<PeerChannelBase.DataReceivedEventArgs> Examples // Event is raised when a new known peer is discovered, regardless of point of origin private static void HandleNewKnownPeer(object sender, PeerNetwork.NewPeerEventArgs e) { // The peer channel's DataReceived event subscribed to HandleIncomingData function e.peerChannel.DataReceived += HandleIncomingData; } private static void HandleIncomingData(object? sender, Peer_Channel_Base.DataReceivedEventArgs e) { Console.WriteLine(e.Data); // incoming information received by the PeerChannel is printed to console }"
  },
  "api/P2PNet.Peers.PeerChannel_Base.DataReceivedEventArgs.html": {
    "href": "api/P2PNet.Peers.PeerChannel_Base.DataReceivedEventArgs.html",
    "title": "Class PeerChannel_Base.DataReceivedEventArgs | P2PNetDocs",
    "summary": "Class PeerChannel_Base.DataReceivedEventArgs Namespace P2PNet.Peers Assembly P2PNet.dll public class PeerChannel_Base.DataReceivedEventArgs : EventArgs Inheritance object EventArgs PeerChannel_Base.DataReceivedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DataReceivedEventArgs(string) public DataReceivedEventArgs(string data) Parameters data string Properties Data public string Data { get; } Property Value string"
  },
  "api/P2PNet.Peers.PeerChannel_Base.DataReceivedEventHandler.html": {
    "href": "api/P2PNet.Peers.PeerChannel_Base.DataReceivedEventHandler.html",
    "title": "Delegate PeerChannel_Base.DataReceivedEventHandler | P2PNetDocs",
    "summary": "Delegate PeerChannel_Base.DataReceivedEventHandler Namespace P2PNet.Peers Assembly P2PNet.dll public delegate void PeerChannel_Base.DataReceivedEventHandler(object sender, PeerChannel_Base.DataReceivedEventArgs e) Parameters sender object e PeerChannel_Base.DataReceivedEventArgs"
  },
  "api/P2PNet.Peers.PeerChannel_Base.html": {
    "href": "api/P2PNet.Peers.PeerChannel_Base.html",
    "title": "Class PeerChannel_Base | P2PNetDocs",
    "summary": "Class PeerChannel_Base Namespace P2PNet.Peers Assembly P2PNet.dll public abstract class PeerChannel_Base Inheritance object PeerChannel_Base Derived PeerChannel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields IncomingDataQueue protected ConcurrentQueue<string> IncomingDataQueue Field Value ConcurrentQueue<string> OutgoingDataQueue protected ConcurrentQueue<string> OutgoingDataQueue Field Value ConcurrentQueue<string> packetQueue protected ConcurrentQueue<DistributionProtocol.PacketTypeRelay> packetQueue Field Value ConcurrentQueue<DistributionProtocol.PacketTypeRelay> Properties IsTrustedPeer protected bool IsTrustedPeer { get; set; } Property Value bool Methods ExtractWholeMessage(string) protected DistributionProtocol.PacketTypeRelay ExtractWholeMessage(string receivedData) Parameters receivedData string Returns DistributionProtocol.PacketTypeRelay HandleDataTransmissionPacket(string) protected virtual void HandleDataTransmissionPacket(string data) Parameters data string HandleDisconnectPacket(string) protected virtual void HandleDisconnectPacket(string data) Parameters data string HandleIdentityPacket(string) protected virtual void HandleIdentityPacket(string data) Parameters data string HandlePeerGroupPacket(string) protected virtual void HandlePeerGroupPacket(string data) Parameters data string HandlePureMessagePacket(string) protected virtual void HandlePureMessagePacket(string data) Parameters data string IsValidMessageFormat(string) protected bool IsValidMessageFormat(string inputString) Parameters inputString string Returns bool LoadOutgoingData(string) Add the outgoing information to the broadcast queue. public virtual void LoadOutgoingData(string outgoing) Parameters outgoing string The information to be queued for broadcast. OnDataReceived(string) protected virtual void OnDataReceived(string data) Parameters data string PacketHandler(CancellationToken) protected Task PacketHandler(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns Task StartPacketHandling() protected void StartPacketHandling() TerminateChannel() protected virtual void TerminateChannel() TerminateCurrentReceiver() Terminates the receiver task. public virtual void TerminateCurrentReceiver() TerminateCurrentSender() Terminates the sender task. public virtual void TerminateCurrentSender() TerminatePacketHandler() Terminates the packet handler task. public virtual void TerminatePacketHandler() TrustPeer() Promote trust level of peer. public virtual void TrustPeer() UntrustPeer() Demote trust level of peer. public virtual void UntrustPeer() Events DataReceived Occurs when a peer channel receives incoming data or information. Subscribers can use this event to handle and process incoming data and information. public event EventHandler<PeerChannel_Base.DataReceivedEventArgs> DataReceived Event Type EventHandler<PeerChannel_Base.DataReceivedEventArgs> Examples // Event is raised when a new known peer is discovered, regardless of point of origin private static void HandleNewKnownPeer(object sender, PeerNetwork.NewPeerEventArgs e) { // The peer channel's DataReceived event subscribed to HandleIncomingData function e.peerChannel.DataReceived += HandleIncomingData; } private static void HandleIncomingData(object? sender, Peer_Channel_Base.DataReceivedEventArgs e) { Console.WriteLine(e.Data); // incoming information received by the PeerChannel is printed to console }"
  },
  "api/P2PNet.Peers.html": {
    "href": "api/P2PNet.Peers.html",
    "title": "Namespace P2PNet.Peers | P2PNetDocs",
    "summary": "Namespace P2PNet.Peers Classes GenericPeer Represents a default peer implementation using IPeer. InboundConnectingPeersQueue IncomingPeerEventArgs PeerChannel Represents a communication channel with a peer in the P2P network. PeerChannelBase PeerChannelBase.DataReceivedEventArgs Interfaces IPeer Represents a peer with an IP address, port, TCP client, network stream, and identifier. Delegates PeerChannelBase.DataReceivedEventHandler"
  },
  "api/P2PNet.Routines.IRoutine.html": {
    "href": "api/P2PNet.Routines.IRoutine.html",
    "title": "Interface IRoutine | P2PNetDocs",
    "summary": "Interface IRoutine Namespace P2PNet.Routines Assembly P2PNet.dll public interface IRoutine Properties RoutineInterval int RoutineInterval { get; set; } Property Value int RoutineName string RoutineName { get; init; } Property Value string Methods SetRoutineInterval(int) void SetRoutineInterval(int interval) Parameters interval int StartRoutine() void StartRoutine() StopRoutine() void StopRoutine()"
  },
  "api/P2PNet.Routines.Implementations.DiscernPeerChannels.html": {
    "href": "api/P2PNet.Routines.Implementations.DiscernPeerChannels.html",
    "title": "Class DiscernPeerChannels | P2PNetDocs",
    "summary": "Class DiscernPeerChannels Namespace P2PNet.Routines.Implementations Assembly P2PNet.dll public class DiscernPeerChannels : IRoutine Inheritance object DiscernPeerChannels Implements IRoutine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DiscernPeerChannels() public DiscernPeerChannels() Properties RoutineInterval public int RoutineInterval { get; set; } Property Value int RoutineName public string RoutineName { get; init; } Property Value string Methods SetRoutineInterval(int) public void SetRoutineInterval(int interval) Parameters interval int StartRoutine() public void StartRoutine() StopRoutine() public void StopRoutine()"
  },
  "api/P2PNet.Routines.Implementations.RotateBroadcastPort.html": {
    "href": "api/P2PNet.Routines.Implementations.RotateBroadcastPort.html",
    "title": "Class RotateBroadcastPort | P2PNetDocs",
    "summary": "Class RotateBroadcastPort Namespace P2PNet.Routines.Implementations Assembly P2PNet.dll public class RotateBroadcastPort : IRoutine Inheritance object RotateBroadcastPort Implements IRoutine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RotateBroadcastPort() public RotateBroadcastPort() Properties RoutineInterval public int RoutineInterval { get; set; } Property Value int RoutineName public string RoutineName { get; init; } Property Value string Methods SetRoutineInterval(int) public void SetRoutineInterval(int interval) Parameters interval int StartRoutine() public void StartRoutine() StopRoutine() public void StopRoutine()"
  },
  "api/P2PNet.Routines.Implementations.html": {
    "href": "api/P2PNet.Routines.Implementations.html",
    "title": "Namespace P2PNet.Routines.Implementations | P2PNetDocs",
    "summary": "Namespace P2PNet.Routines.Implementations Classes DiscernPeerChannels RotateBroadcastPort"
  },
  "api/P2PNet.Routines.NetworkRoutines-2.html": {
    "href": "api/P2PNet.Routines.NetworkRoutines-2.html",
    "title": "Class NetworkRoutines<TKey, TValue> | P2PNetDocs",
    "summary": "Class NetworkRoutines<TKey, TValue> Namespace P2PNet.Routines Assembly P2PNet.dll Handles network routines for peer-to-peer networking. public sealed class NetworkRoutines<TKey, TValue> where TValue : class, IRoutine Type Parameters TKey The type of the key. TValue The type of the value which must implement IRoutine. Inheritance object NetworkRoutines<TKey, TValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Count Gets the count of routines. public int Count { get; } Property Value int Methods AddRoutine(TValue) Adds a routine to the routines dictionary. public void AddRoutine(TValue item) Parameters item TValue The key-value pair of the routine to add. GetEnumerator() public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns IEnumerator<KeyValuePair<TKey, TValue>> GetRoutine(TKey) Gets the routine associated with the specified key. public TValue GetRoutine(TKey key) Parameters key TKey The key of the routine to get or set. Returns TValue The routine associated with the specified key. Exceptions KeyNotFoundException Thrown when the key is not found in the cache. InitializeRoutines() Initializes the routines dictionary and adds default routines. public void InitializeRoutines() SetRoutine(TKey, TValue) Sets the routine associated with the specified key. public void SetRoutine(TKey key, TValue value) Parameters key TKey The key of the routine to set. value TValue The routine to set. TrySetRoutineInterval(TKey, int) Tries to set the interval of the routine associated with the specified key. public void TrySetRoutineInterval(TKey key, int interval) Parameters key TKey The key of the routine to set the interval for. interval int The interval to set. TryStartRoutine(TKey) Tries to start the routine associated with the specified key. public void TryStartRoutine(TKey key) Parameters key TKey The key of the routine to start. TryStopRoutine(TKey) Tries to stop the routine associated with the specified key. public void TryStopRoutine(TKey key) Parameters key TKey The key of the routine to stop."
  },
  "api/P2PNet.Routines.html": {
    "href": "api/P2PNet.Routines.html",
    "title": "Namespace P2PNet.Routines | P2PNetDocs",
    "summary": "Namespace P2PNet.Routines Classes NetworkRoutines<TKey, TValue> Handles network routines for peer-to-peer networking. Interfaces IRoutine"
  },
  "api/P2PNet.Widescan.HardwareMode.html": {
    "href": "api/P2PNet.Widescan.HardwareMode.html",
    "title": "Enum HardwareMode | P2PNetDocs",
    "summary": "Enum HardwareMode Namespace P2PNet.Widescan Assembly P2PNet.Widescan.dll public enum HardwareMode Fields Accelerator = 1 CPU = 2 GPU = 0"
  },
  "api/P2PNet.Widescan.MaximumMemoryAllocation.html": {
    "href": "api/P2PNet.Widescan.MaximumMemoryAllocation.html",
    "title": "Enum MaximumMemoryAllocation | P2PNetDocs",
    "summary": "Enum MaximumMemoryAllocation Namespace P2PNet.Widescan Assembly P2PNet.Widescan.dll public enum MaximumMemoryAllocation Fields EightGigabytes = 6 FiveHundredMegabytes = 2 FourGigabytes = 5 NoLimit = 0 OneGigabyte = 3 SixteenGigabytes = 7 TwoGigabytes = 4 TwoHundredFiftyMegabytes = 1"
  },
  "api/P2PNet.Widescan.Widescan.html": {
    "href": "api/P2PNet.Widescan.Widescan.html",
    "title": "Class Widescan | P2PNetDocs",
    "summary": "Class Widescan Namespace P2PNet.Widescan Assembly P2PNet.Widescan.dll An IPv6 tool that leverages hardware capabilities to generate vast quantities of IPv6 addresses to send identifier packets to. The widescan throws a large net out to every possible combination of addresses within the provided prefix. public class Widescan Inheritance object Widescan Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Widescan() public Widescan() Properties HardwareMode Gets the hardware mode for the IPv6 address generation. public static HardwareMode HardwareMode { get; } Property Value HardwareMode MaximumMemoryAllocated Gets or sets the maximum memory allowed for the application to use. IPv6 addresses can generate very rapidly and take a lot of system memory. The maximum allocation will pause address generation to allows processing to catch up, then resume processing. public static MaximumMemoryAllocation MaximumMemoryAllocated { get; set; } Property Value MaximumMemoryAllocation Methods AddAddressPrefix(List<string>) public static void AddAddressPrefix(List<string> input) Parameters input List<string> AddAddressPrefix(string) Represents the first 4 higher segments of an IPv6 address (right to left). At least 1 is required to begin address generation. (TIP: use online resources to find reputable ISP companies registering prefixes and use those) public static void AddAddressPrefix(string input) Parameters input string This should be a 4 segment IPv6 prefix. AddAddressPrefix(string[]) public static void AddAddressPrefix(string[] input) Parameters input string[] SetHardwareMode(HardwareMode) Sets the target hardware system for handling IPv6 address generation. public static void SetHardwareMode(HardwareMode hardwareMode) Parameters hardwareMode HardwareMode The intended hardware offload. StartICMPListener() Starts the ICMP listener independent of the widescan broadcasting. public static void StartICMPListener() Remarks Use this method to start the ICMP listener without starting the widescan. Client applications can use this method to listen for incoming ICMP packets, rendering them receptive to widescan broadcasts. StartWidescan() Begins the widescanning. public static void StartWidescan() StopICMPListener() Stops the ICMP listener. public static void StopICMPListener() StopWidescan() Stops the widescanning. public static void StopWidescan()"
  },
  "api/P2PNet.Widescan.html": {
    "href": "api/P2PNet.Widescan.html",
    "title": "Namespace P2PNet.Widescan | P2PNetDocs",
    "summary": "Namespace P2PNet.Widescan Classes Widescan An IPv6 tool that leverages hardware capabilities to generate vast quantities of IPv6 addresses to send identifier packets to. The widescan throws a large net out to every possible combination of addresses within the provided prefix. Enums HardwareMode MaximumMemoryAllocation"
  },
  "api/P2PNet.html": {
    "href": "api/P2PNet.html",
    "title": "Namespace P2PNet | P2PNetDocs",
    "summary": "Namespace P2PNet Classes PeerNetwork PeerNetwork.NewPeerEventArgs PeerNetwork.TrustPolicies PeerNetwork.TrustPolicies.BootstrapTrustPolicy Handles trust and permissions in regards to bootstrap connections. PeerNetwork.TrustPolicies.IncomingPeerTrustPolicy Handles trust and permissions in regards to incoming peer connections. PeerNetwork.TrustPolicies.PeerNetworkTrustPolicy Enums PeerNetwork.TrustPolicies.BootstrapTrustPolicyType PeerNetwork.TrustPolicies.IncomingPeerTrustPolicy.IncomingPeerMode Values for IncomingPeerPlacement QueueBasedThe inbound peer will be directed to the inbound peer queue. EventBasedAn event is triggered and the peer is passed to the event args. QueueAndEventBasedThe peer is directed to the inbound peer queue, and an event is triggered where the peer is passed to the event args. PeerNetwork.TrustPolicies.LocalIdentifierSetPolicyTypes Specifies the policy for initializing and managing the identifier of a peer member in the P2P network. This policy determines whether the identifier can be set locally, remotely, or both, and whether it can be changed after initial assignment. Delegates PeerNetwork.NewKnownPeerEventHandler"
  },
  "index.html": {
    "href": "index.html",
    "title": "| P2PNetDocs",
    "summary": "P2PNet P2PNet facilitates peer-to-peer networking with an array of components and options for setting up your network. Initial peer discovery can be initiated in the LAN, and facilitated over a WAN utilizing various methods such as bootstrapping and IPv6 ICMP blasting (widescan). The PeerNetwork will be able to use a range of interoperable WAN and LAN discovery mechanisms to expand and grow the network. Implementing the P2PNet library, you will be able to integrate your own verification steps and protocols to validate discovered peer members before establishing an enhanced connection that will facilitate the exchange of data and information. Documentation Peer Network Bootstrap Server Widescan"
  },
  "misc/bootstrapserver.html": {
    "href": "misc/bootstrapserver.html",
    "title": "| P2PNetDocs",
    "summary": "Bootstrap \uD83E\uDD1D The application serves as a bootstrap node, providing an HTTP endpoint to distribute known peers to new peers joining the network. This setup ensures seamless peer discovery and initialization, enabling efficient and secure distributed data exchange within the peer network. By containerizing the application using Docker, deployment becomes significantly easier and makes quick VPS deployments easy. Additionally, the user control panel offers finer-grained controls over the network, including scaling and monitoring, which enhances the manageability and reliability of the peer network infrastructure. Initialization The P2PBootstrap project initializes by setting up the necessary configurations and services required for the bootstrap server to operate. The main entry point is the Program.cs file, which configures the application and starts the web server. Configuration: The application reads configuration settings from the appsettings.json file. This includes settings for encryption key directory, primary key names, database path, and other essential configurations. In order to ease the deployment process for containerized instances, all configuration settings in the configuration file appsettings.json have an environmental variable equivalent that can be used. In order to tell the application to use these, the environmental variable CONTAINERIZED_ENVIRONMENT must be set to to true. In the table below, you can see each configuration key alongside its corresponding environment variable name and a brief description of its purpose. AppSettings Key Environment Variable Description Configuration:KeysDirectory KEYS_DIRECTORY Specifies the directory where encryption keys are stored. Configuration:BootstrapMode BOOTSTRAP_MODE Determines whether the bootstrap server runs in Authority or Trustless mode. Configuration:AuthorityKey:PublicKey PUBLIC_KEY_PATH The filename (or path, relative to the base directory) for the public key used by the bootstrap server. Configuration:AuthorityKey:PrivateKey PRIVATE_KEY_PATH The filename (or path) for the private key used by the bootstrap server. Configuration:NetworkName NETWORK_NAME The identifier for the P2P network, used to distinguish this network from others. Database:DbFileName DB_FILENAME The filename for the local database file storing bootstrap server data. When running in a containerized environment, the configuration management first attempts to retrieve these values from their respective environment variables (e.g., \"KEYS_DIRECTORY\" for the keys folder). If an environment variable isn't set, it falls back to the values specified in appsettings.json. This design allows for flexible configuration management during deployment, especially in environments like Docker containers where runtime settings might differ from development. This side-by-side mapping ensures that you can maintain consistent configuration across different deployment scenarios with minimal code changes. Logging: Logging is handled using the ConsoleDebugger package. Web Server Setup: The application uses ASP.NET Core to set up the web server. It configures the HTTP request pipeline, enabling default files, static files, and routing. This is an AOT compatible application, as is most of the P2PNet library. Operation The P2PBootstrap project operates by providing several key functionalities: Peer Distribution: The bootstrap server provides an HTTP endpoint (/api/Bootstrap/peers) to distribute the list of known peers to new peers joining the network. This endpoint can operate in two modes: Trustless Mode: Returns the list of known peers directly. Authority Mode: Requires the client to receive and store a public key from the bootstrap server before returning the peer list. Admin Terminal Integration: The server integrates an admin terminal to easily execute commands. Encryption Service: The server initializes an encryption service to handle secure communication. This includes generating and loading PGP keys, generating new keys, clear signing messages, generating hashes of objects, and more. Database Initialization: The server initializes a local database to store necessary data. It ensures the database directory exists and sets up the required files. User Control Panel The user control panel provides a web-based interface for managing the bootstrap server. In this web-based interface is a terminal for executing commands. It includes the following pages for easier management as well: Overview: Displays an overview of the server's status and key metrics. Settings: Allows users to modify server settings, such as encryption keys and database paths. Peers: Displays the list of known peers and provides options to perform actions on them, such as disconnecting or blocking peers. Overview To supplement the information visually, the following diagrams are provided: Bootstrap Server Architecture: Shows a broad architecture of the bootstrap server. Endpoints: Illustrates the flow of endpoints, from initial request to response. Note: Bootstrap server still under construction \uD83C\uDFD7️"
  },
  "misc/getting-started.html": {
    "href": "misc/getting-started.html",
    "title": "Getting Started | P2PNetDocs",
    "summary": "Getting Started"
  },
  "misc/introduction.html": {
    "href": "misc/introduction.html",
    "title": "Introduction | P2PNetDocs",
    "summary": "Introduction"
  },
  "misc/p2pnetwork.html": {
    "href": "misc/p2pnetwork.html",
    "title": "| P2PNetDocs",
    "summary": "P2P Network Basics \uD83C\uDF10 The P2PNet library provides the core functionality for building and managing a peer-to-peer network. It includes classes and methods for peer discovery, connection management, data exchange, and network routines. This document provides a broad overview of the peer network basics. Initialization The PeerNetwork class is the main entry point for initializing and managing the peer-to-peer network. It sets up the necessary configurations and services required for network operations. Configuration: The peer network hosts several configuration fields which can be used to fine tune control over the network operations. Some of these fields include subclasses that can be explored under TrustPolicies. Other aspects of configuration are in design such as the usage of queues and events, or the use of delegates for handling certain scenarios. Logging: Logging is handled using the ConsoleDebugger package. Network Configuration: The application scans all network interface devices and collects essential information needed for the peer network, such as public IP addresses. Operation The PeerNetwork class operates by providing several key functionalities: Peer Discovery and Connection:The library supports both LAN and WAN peer discovery. It uses broadcasting, multicasting, and designated ports to discover peers and establishes connections using TCP. LAN Discovery: Broadcasts are used for peer discovery within the local network. WAN Discovery: Specific WAN components and designated ports facilitate the discovery of peers over a wide area. Peer Management:A list of known peers and active peer channels is maintained. This supports functions such as adding or removing peers and managing connection permissions. Known Peers: Stores details of all discovered peers. Active Peer Channels: Manages active communication channels and leverages the PeerChannel class to encapsulate connection logic. Data Exchange and Network Packets:Data exchange between peers is accomplished via network packets formatted to ensure data consistency and integrity. Network Packets: These packets encapsulate various types of information for transmission between peers. Types include identity packets, disconnect packets, data transmission packets, pure message packets, and more. The packets are wrapped using the DistributionProtocol so that each packet is tagged properly, making it easier for the receiver to determine the payload type. DistributionHandler: This static class is responsible for handling outgoing and incoming data packets. It wraps raw data into packets and distributes them to trusted peers. In addition, the handler supports unwrapping payloads to extract raw data before processing. NetworkTaskHandler: In parallel with data handling, the NetworkTaskHandler manages network tasks defined as actions such as blocking a peer, sending messages, or synchronizing data. Tasks are enqueued and processed asynchronously to maintain smooth operations across the network. Peer Channels: Each communication channel between peers is represented by an instance of the PeerChannel class. This class manages the relay of data packets, conducts connection retries, and enforces trust policies by invoking predefined delegates from the PacketHandleProtocol. Routines The NetworkRoutines class provides a mechanism for managing network routines. Routines are tasks that run at specified intervals to perform various network-related operations. Routine Management: The NetworkRoutines class manages a dictionary of routines and provides methods for adding, starting, stopping, and setting the interval of routines. Default Routines: The application has default routines. These default routines do not automatically startup, but are automatically added in to the routines list. Custom Routines: Users can add custom routines to perform specific tasks. Routines are accessed using their RoutineName property. This is automatically handled when they are added as network routines. Trust Policies The PeerNetwork class employs a multi-pronged trust model to ensure secure and robust peer interactions. These policies determine how incoming connections are verified, how bootstrap nodes are treated, and how the local network identifier is managed. Incoming Peer Trust PolicyThis policy governs the verification and handling of peers attempting to connect to the network. It includes several configurable settings: AllowDefaultCommunication: Enables basic communication—such as exchanging PureMessagePackets and DisconnectPackets—without full verification. Example use case: In a trusted LAN environment, you might allow default communication to quickly establish a connection before a deeper security check. AllowEnhancedPacketExchange: When enabled, permits the exchange of complex packets (e.g., DataTransmissionPackets) that may carry critical data. Example use case: For networks where peers are pre-validated, you might allow enhanced packet exchange immediately to boost performance. RunDefaultTrustProtocol: Initiates the system’s built-in handshake mechanism (which you can replace with a custom PeerTrustHandshake delegate) that verifies a peer’s authenticity before granting them full network access. Incoming Peer Placement: Supports both queue-based and event-based models. Queue-based placement helps throttle connections when there are many incoming requests, while event-based placement provides immediate notification for further processing. Bootstrap Trust PolicyThis policy handles the initial secure connection phase with bootstrap nodes that help a new node join the network. Key settings include: AllowBootstrapTrustlessConnection: Permits bootstrap connections without pre-established credentials, often useful for open networks needing quick scalability. AllowBootstrapAuthorityConnection: Allow bootstrap nodes to validate their credentials via key issuance, ensuring a tighter security model. MustBeAuthority: Prohibits connecting to bootstrap nodes that are not operating in authority mode. Example use case: In a decentralized network, you may require that only nodes with verified authority can bootstrap, ensuring that malicious nodes cannot easily infiltrate the system. FirstSingleLockingAuthority: Enforce strict measures so that the first trusted authority connection can be locked in—preventing further authority connections that might threaten network integrity. PeerNetworkTrustPolicyFocuses on controlling how the local network identifier—a unique marker for each peer—is set and maintained: LocalIdentifierSetPolicy: Defines policies like StrictLocalOnly or StrictRemoteOnly to ensure that the identifier is assigned only under secure, predefined conditions. Use case for remote: In a decentralized network that values security, bootstrap servers are tasked with assigning identities to peers using a protocol that hashes the the public IPv4 address and another unique serial value if available. If a peer is found to be a malicious actor, it is much easier to then ban and exclude them from connecting. Use case for local: In a decentralized network that prioritizes anonymity, the identifier is nullified locally with StrictLocalOnly set to true. This will prevent the peer's activity from bearing any unique fingerprinting that isn't easy to spoof. These trust policies work in tandem to balance flexibility and security. You can adjust the settings to suit various network scenarios—from enterprise-level internal networks that rely on rapid, low-security handshakes, to public peer-to-peer systems that demand strict, authority-based validations. Overview Peer Network Architecture Shows a broad overview of the architecture of the peer network, including default discovery mechanisms."
  },
  "misc/peers.html": {
    "href": "misc/peers.html",
    "title": "| P2PNetDocs",
    "summary": "Peers Peers are representative of client users within the peer network. When a connection is established to a peer through the TCP listener, the connection by default is wrapped in an instance of the GenericPeer implementation of IPeer and the PeerChannel which stores an IPeer implementation. The IPeer interface defines the essential properties and methods for a peer, including the IP address, port, TCP client, network stream, and a unique identifier. The GenericPeer class provides a default implementation of the IPeer interface, encapsulating the peer's IP address, port, TCP client, and network stream. It also includes a unique identifier for the peer, which can be used for whitelisting and blacklisting peers in the network. The PeerChannel class represents a communication channel with a peer in the P2P network. It manages the sending and receiving of data packets, handles connection retries, and maintains the state of the communication channel. The PeerChannel class also includes methods for opening and closing the channel, as well as handling incoming and outgoing data packets. The PacketHandleProtocol class stores the Action delegates for each packet type, and the PeerChannel will invoke these by default depending on the respective data packet type. Peer Lifecycle The lifecycle of a peer in the P2P network begins with the discovery and connection phase. When a new peer is discovered, the handler checks if the peer is a valid connection. If the peer is new connection and not duplicate, and is also not blocked, it will be wrapped in an instance of the GenericPeer class and depending on the IncomingPeerTrustPolicy.IncomingPeerTrustPolicy value, will be either enqueued and/or passed to the event OnIncomingPeerConnectionAttempt by the InboundConnectingPeersQueue, then finally will be added to the KnownPeers list. Once the connection is established, a PeerChannel is created to manage the communication with the peer. The PeerChannel handles the sending and receiving of data packets, connection retries, and maintains the state of the communication channel. The PeerChannel will then be added to the ActivePeerChannels list. The PeerChannel also invokes the appropriate Action delegates from the PacketHandleProtocol class based on the type of data packet received. This ensures that the correct actions are taken for each type of data packet, facilitating efficient and reliable communication between peers. There are some trust policies under IncomingPeerTrustPolicy that can slighly modify the initial behavior of the established PeerChannel AllowDefaultCommunication - as the name implies, allows default communication between peers to exchange PureMessagePackets and DisconnectPackets. Default is true. AllowEnhancedPacketExchange - determines if peers will be trusted to exchange all other packet types, such as DataTransmissionPackets, which contain binary data such as files and network-related tasks. Default is false. RunDefaultTrustProtocol - determines if, upon opening the peer channel, the default routine IncomingPeerTrustPolicy.DefaultTrustProtocol will be invoked to determine if the peer is a truster member of the network or not If you intend to erect a more secure and private network that will leverage encryption or certificates for identification, you might set AllowDefaultCommunication to true, AllowEnhancedPacketExchange to false, and RunDefaultTrustProtocol to true. You would then devise a multi-step method called PeerTrustHandshake that takes a PeerChannel parameter. For example, the method would exchange a few PureMessagePackets for some kind of handshake, temporarily elevate the trust level of the peer, then swap a DataTransmissionPacket to exchange a key or signed message. Then confirm whether to keep trust elevated, or to demote trust and then proceed to end the connection with the peer. Then you would set the IncomingPeerTrustPolicy.DefaultTrustProtocol delegate to the PeerTrustHandshake you just made. Peer Channel The PeerChannel is a managed wrapper for the connection with the peer. It is designed to handle the inbound and outbound relay of data and information, control accessibility and permissions, and safely handle other network logic. Much of the logic uses delegates in order to remain modular for development needs. This is the list of delegates in the PacketHandleProtocol class that the PeerChannel uses for handling different types of packets. These are all Action< string > delegates, where the string is a JSON serialized form of the packet: Name Description PacketHandleProtocol.HandleIdentityPacketAction The default delegate for handling inbound IdentityPackets. PacketHandleProtocol.HandleDisconnectPacketAction The default delegate for handling inbound DisconnectPackets. PacketHandleProtocol.HandlePeerGroupPacketAction The default delegate for handling inbound peer CollectionSharePackets. PacketHandleProtocol.HandleDataTransmissionPacketAction The default delegate for handling inbound DataTransmissionPackets. PacketHandleProtocol.HandlePureMessagePacketAction The default delegate for handling inbound PureMessagePackets. These all have default implementations that can be overridden. The PeerChannel will always pass packets to the respective delegate, regardless if the OnDataReceived event is subscribed to and utilized. If you want to handle all inbound data through the OnDataReceived event, you will need to create empty filler methods that simply do not preform any actions and assign them to override the default delegates."
  },
  "misc/testing.html": {
    "href": "misc/testing.html",
    "title": "| P2PNetDocs",
    "summary": "Testing This portion of documentation outlines different methods of testing, and different test types with varying levels of setup complexity. LAN Tests Quick LAN test - quickly setup a peer connection using the ExampleApplication container and a local instance started from Visual Studio Multi-peer LAN test - runs a Powershell script which automates a Docker Compose setup to simulate 3 peers establishing connection over NAT WAN Tests Bootstrap test - in progress Widescan test - in progress Quick LAN test In the ExampleApplication, startup the Docker container from Visual Studio. Once the container have verifiably started, go ahead and stop the container (Ctrl + C or from Docker dashboard) With the container still stopped, go ahead and run a regular instance of the ExampleApplication from Visual Studio (Ctrl + F5) Ensure the regular instance of the ExampleApplication starts up. Leave this open. With the regular instance running, go into your Docker dashboard and go to Containers. Proceed to startup the ExampleApplication container (simply click the Start button). Go to the Exec tab and you should see the Windows terminal open. Type ExampleApplication.exe then hit enter. You should now be able to see the application start up in the Docker container. From this point, you have two instances of the ExampleApplication running which you should be able to observe side-by-side. Observe and see if the default trust protocol shows back and forth communication between the peers. Multi-peer LAN test Open the solution in Visual Studio. It is advised to Clean Solution and then to do a fresh Build Solution. Then, proceed to run the LAN_Test.ps1 script that should be in the root directory The Docker Compose build process may take a minute or two. This is normal. The build process creates a new NAT network and 3 individual peer containers. This is automated through the Powershell script. You should then be able to observe the multi-peer LAN test output within the Developer Powershell console in Visual Studio. It will typically look something like this:"
  },
  "misc/widescan.html": {
    "href": "misc/widescan.html",
    "title": "| P2PNetDocs",
    "summary": "Widescan \uD83D\uDCE1 The P2PNet.Widescan class library project is designed to facilitate mass IPv6 address generation and peer discovery within a peer-to-peer network. This project leverages hardware capabilities, such as GPUs, to efficiently generate vast quantities of IPv6 addresses. By utilizing user-defined address prefixes, it allows for a more targeted and narrow scope of addresses to ping, enhancing the efficiency of the discovery process. This can be leveraged with publicly available information on IPv6 prefix registrations, like the Ripe database, in order to refine the scope of the widescan. Additionally, the project employs lightweight ICMP packets to broadcast discovery information, ensuring minimal network overhead while effectively communicating with potential peers. Initialization The P2PNet.Widescan project initializes by setting up the necessary configurations and services required for widescan operations. The main entry point is the Widescan class, which configures the application and starts the widescan process. Configuration: The application reads configuration settings from the provided parameters. This includes settings for address prefixes, hardware mode (GPU or CPU), and other essential configurations. Logging: Logging is configured to use a plain text format and is activated to capture important events and errors. Hardware Mode Setup: The application can be configured to use either GPU offloading or parallel CPU capabilities for address generation and peer discovery. Operation The P2PNet.Widescan project operates by providing several key functionalities: IPv6 Address Generation: The widescan application generates vast quantities of IPv6 addresses using either GPU offloading or parallel CPU capabilities. This allows for efficient and rapid address generation. GPU Offloading: Utilizes the processing power of GPUs to generate IPv6 addresses in parallel, significantly speeding up the process. Parallel CPU Capabilities: Uses multiple CPU cores to generate IPv6 addresses in parallel, providing an alternative for systems without GPU support. Peer Discovery: The widescan application pings the generated IPv6 addresses to discover potential peers within the network. It uses lightweight ICMP packets to broadcast discovery information, ensuring minimal network overhead. Address Prefix Filtering: By utilizing user-defined address prefixes, the widescan application narrows the scope of addresses to ping, enhancing the efficiency of the discovery process. This can be refined using publicly available information on IPv6 prefix registrations, such as the Ripe database. Integration The P2PNet.Widescan project is designed to be a modular import that can be integrated with other P2P network applications, such as aP2PNetwork client application or the P2PBootstrap server. It does not run independently and does not use appsettings.json for configuration. Instead, it relies on the host application to provide the necessary configuration parameters. Diagrams To supplement the information visually, the following diagrams are provided: Widescan Architecture: Shows the overall architecture of the widescan application, including its interaction with the P2P network and the hardware components (GPU/CPU). IPv6 Address Generation Flow: Illustrates the flow of IPv6 address generation, from configuration to address generation using GPU or CPU, and finally to peer discovery. This is very much a simple consumer-producer pattern, with intermediate in-memory queues to operate as a broadcaster. ICMP Packet Listener: Operating independently of the broadcaster, the ICMP Packet Listener operates as a listener for responses from prospective peers and other potential widescan instances. This utilizes a docile form of packet sniffing on the host machine. Note: Widescan project still under construction \uD83C\uDFD7️"
  }
}